%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Phase_portrait_with_regionmark.eps
%%Creator: Adobe Illustrator(R) 12
%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: Tillhor
%%CreationDate: 9/8/2009
%%BoundingBox: 0 5 435 318
%%HiResBoundingBox: 0 0 505.8746 327.1670
%%CropBox: 0 0 505.8746 327.1670
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%+ procset Adobe_CoolType_Core 2.23 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 70 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/set_gvm
{
	currentglobal exch setglobal
}bdf
/reset_gvm
{
	setglobal
}bdf
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/thold_halftone
{ 
	level3
		{sethalftone currenthalftone}
		{
			dup /HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}
			{
				begin
				Width Height mul {
					Thresholds read {pop} if
				} repeat
				end
				currenthalftone
			} ifelse
		}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			/srcDataStrs [ imageDict begin
				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
				{
					Width Decode length 2 div mul cvi string
				} repeat
				end ] def		
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put
			imageDict /Decode [0 1] put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		DataSource 0 get type
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch get exec length exch 0 ne {pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type /dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{ 
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		dup /CSDBase known {
			/CSDBase get /CSD get_res /Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5 {cleartomark} bind def
}{
	/pdfmark_5 {pdfmark} bind def
}ifelse
/ReadBypdfmark_5
{
	2 dict begin
	/makerString exch def string /tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
		pop pop cleartomark exit
		}{
			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5
		} ifelse
	}loop
	end
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.
%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for
%% definitions of some fundamental procedures.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 201 dict dup begin put
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_in_pattern false def
/AGMCORE_currentpagedevice nd
/knockout_unitsq nd
currentglobal true setglobal
[/CSA /Gradient /Procedure]
{
	/Generic /Category findresource dup length dict copy /Category defineresource pop
} forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_&setoverprint /setoverprint ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not AGMCORE_currentpagedevice/OverrideSeparations known and
						{
							AGMCORE_currentpagedevice/OverrideSeparations get
							{
								/HqnSpots /ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
						}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace
							false
							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup (Cyan) eq exch /Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup (Magenta) eq exch /Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup (Yellow) eq exch /Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup (Black) eq exch /Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type /dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading /AGMCORE_ignoreshade known
					currentdict end exch
					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where {
						begin
						dup 0 get dup /Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[ 
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get [ 
									exch {
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									} forall 
								] 1 xpt
							}if
						}ifelse
						end
					} if
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin /clonedict load end def
	/clonearray Adobe_AGM_Utils begin /clonearray load end def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/getrampcolor
	{ 
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type /stringtype eq {indx get} if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		} for
		ColorSpaceFamily /Separation eq 
		{sep}
		{
			ColorSpaceFamily /DeviceN eq
			{devn} {setcolor}ifelse
		}ifelse
	} bdf
	/sssetbackground {aload pop setcolor} bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		c1x c2x eq
		{
			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
		} ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			/max { 2 copy gt { pop } {exch pop} ifelse } bdf
			/min { 2 copy lt { pop } {exch pop} ifelse } bdf
			rampdict begin
			40 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}
						{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{ /theta 89.99 def}
							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}
							{
								/L1maxX 0 def
								/L2maxX 0 def
							} ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						} ifelse
					} ifelse
				} ifelse
			} if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt { exch } if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			} if
		} if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		newpath
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}
		{
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			} repeat
			pop
		} ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}
			{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}
					{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{ /theta 89.99 def}
						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}
						{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					} ifelse
				} ifelse
			} ifelse
		} if
		grestore
		grestore
		end
		end
		end
		} ifelse
	} bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		x1 x2 eq
		{
			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			rampdict begin
			20 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt { exch } if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				} if
			} if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				} if
			} if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			} repeat
			pop
			ext1 {
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				} if
			} if
			grestore
			grestore
			end
			end
			end
		} ifelse
	} bdf
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
/capture_currentpagedevice {
	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf
} def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup //Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name /MappedCSA xdf}ifelse
} def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup () eq exch (All) eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc {setcolor} bdf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		7 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {
					/AliasedColorants false def
					exit
				}
				{
					new_LookupTables names_index get 0 get null eq {
						dup /Names get names_index get /name xdf
						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
						or or or not {
							/AliasedColorants false def
							exit
						} if
					} if
				} ifelse
			} for
			lut_entry_len 1 eq {
				/AliasedColorants false def
			} if
			AliasedColorants {
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	dup not {
		CSA map_csa
	} if
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants {
				/currentspotalias current_spot_alias def
				false set_spot_alias
			} if
			Names {
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				/names_index names_index 1 add def
			} forall
			AvoidAliasedColorants {
				currentspotalias set_spot_alias
			} if
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
 					0 0 0 0 /setcmykcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				{setcolor} bdf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSDBase known {
			CSDBase /CSD get_res begin
			currentdict /Names known {
				currentdict devncs
			}{
				1 currentdict sepcs
			} ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt /Names where {pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal {
					/tableIndex xdf
					Lookup dup type /stringtype eq {
						compCnt tableIndex map_index
					}{
						exec
					} ifelse
					/Names where {
						pop setdevicencolor
					}{
						setsepcolor
					} ifelse
					currentgray
					tableIndex exch
					HiVal mul cvi 
					NewLookup 3 1 roll put
				} for
				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
				end
			}{
				level3
				{
					currentdict /Names known {
						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt
					} ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict /Names known {
						Lookup dup type /stringtype eq
							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
					}{
						Lookup dup type /stringtype eq
							{/exch cvx /get cvx 255 /div cvx}
							{/exec cvx}ifelse
							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx
					} ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			} ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 
			begin
			CSDBase /CSD get_res begin
			currentdict /Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
			end
		}{
			/Lookup get 4 3 -1 roll map_index setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {
			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup /CSD eq {
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	} ifelse
}def
/del_res
{
	{
		aload pop exch
		dup /CSD eq {
			pop 
			{
				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef
			}forall
		}{
			exch
			{
				1 index undefineresource
			}forall
			pop
		} ifelse
	} forall
}def
/get_res
{
	dup /CSD eq {
		pop
		dup type dup /nametype eq exch /stringtype eq or {
			AGMCORE_CSD_cache exch get
		} if
	}{
		findresource
	} ifelse
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		/CSA get_res
	} if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	clonedict
	begin
	/OldPaintProc /PaintProc load def
	/PaintProc
	{
		mark exch
		dup /OldPaintProc get stopped
		{closefile restore end} if
		cleartomark
	}  def
	end
  } {pop} ifelse
} def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	1 index dup /ID get exch /Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}{null}ifelse
	Intent ne {
		Intent /ColorRendering {findresource} stopped
		{
			pop pop systemdict /findcolorrendering known
			{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				true
			}
			{false} ifelse
		}
		{true} ifelse
		{
			dup begin
			currentdict /TransformPQR known {
				currentdict /TransformPQR get aload pop
				3 {{} eq 3 1 roll} repeat or or
			}
			{true} ifelse
			currentdict /MatrixPQR known {
				currentdict /MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true} ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR [
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind
				] def
				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def
				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def
				currentdict end
			} if
			setcolorrendering_opt
		} if		
	}if
} def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict /ColorRendering known{
			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0} ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get /CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		currentdict/TintProc known currentdict/CSA known and 3 1 roll
		//Adobe_AGM_Core begin
		dup /customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			4 -1 roll{
				exch pop /sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
			pop
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
/set_def_ht
{
	AGMCORE_def_ht sethalftone
} def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.25 0
%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.25 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.25 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict /Adobe_CoolType_Data 2 copy known not
	 { 2 copy 10 dict put }
if
get
	 begin
	 /@opStackCountByLevel 32 dict def
	 /@opStackLevel 0 def
	 /@dictStackCountByLevel 32 dict def
	 /@dictStackLevel 0 def
	 end
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup /args
			7 index
			5 add array put
			put get
			}
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{ pop count }
			if
			dup /argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					 { (*) { pop stop } 128 string /Category resourceforall }
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup
					 {
						  /@shouldNotDisappearDictValue known
								{
										  {
												end
												currentdict 1 index eq
													 { pop exit }
												if
										  }
									 loop
								}
						  if
					 }
				if
				end
		}
		{ false }
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
		currentglobal false setglobal
	  userdict /Adobe_CoolType_Data 2 copy known not
		  { 2 copy 10 dict put }
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0
%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.
%%Version: 1.21 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 27 add dict copy }
	{ 27 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
				mark
				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put
					 {
					 ((Hex) 57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
					 }
				stopped
					 {
					 cleartomark
					 Adobe_CoolType_Utility /@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						  {
						  2 copy get 3 index eq
								{ 1 index length exch sub 1 sub { end } repeat exit }
								{ pop }
						  ifelse
						  }
					 for
					 pop pop
					 Adobe_CoolType_Utility /@eexecStartData get eexec
					 }
					 { cleartomark }
				ifelse
			} }
			{ {
				Adobe_CoolType_Utility /@eexecStartData get eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/AGMIMG_flushfilters
{
	dup type /arraytype ne
		{1 array astore}if
	aload length
		{
		dup type /filetype eq
			{
			dup status 1 index currentfile ne and
				{dup flushfile closefile}
				{pop}
			ifelse
			}{pop}ifelse
		} repeat
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator /imagemask eq{
 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									[ /Separation Name [/DeviceGray]
	 									{ 
	 										sep_colorspace_proc AGMCORE_get_ink_data
											1 exch sub
	 									} bind
										] AGMCORE_&setcolorspace
										/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0 () /SubFileDecode filter
				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0 () /SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx
			}for
		/convProc load /exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2 /add cvx /index cvx
			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx
			}for
	]bind cvx 0 () /SubFileDecode filter
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt {1 add 2 div cvi}{exit}ifelse
			} loop
			string
		} repeat
		end ] def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [ [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA get_csa_by_name 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							devn_alt_datasource
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get get_csa_by_name
				}{
					/Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">C:\Documents and Settings\tn\My Documents\#Undervisning_S3\Nonlinear_control\Exercises\Exercise4_4-8_Phase_portrait.eps</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2009-09-08T15:12:18+02:00</xap:CreateDate>
         <xap:ModifyDate>2009-09-08T15:12:18+02:00</xap:ModifyDate>
         <xap:MetadataDate>2009-09-08T15:12:18+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>168</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAqAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FUBf6q1rdwWkdnP&#xA;eTXEcsoEBhAVYWjVuRlki6mUUpXFVCTXL1HiU6JekytwWjWfUKW3/wBI8FxVuPW7yTmF0W9rGxRw&#xA;Xs6gjf8A5aO4IOSlGlX/AKWv/wDqy3n/AAdn/wBlGRVTGuXpmeH9CXvJFVyeVnSjlgP+Pj/IxVuP&#xA;W7yTmF0W9rGxRwXs6gjf/lo7gg5KUaVLP8ewidoG0fUFlR3idW+qCjxncf70dx8Q8RvlWbJHGaPl&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:E83A0664C49BDE11959BD33380A39837</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:2A1A203C799CDE11959BD33380A39837</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:E73A0664C49BDE11959BD33380A39837</stRef:instanceID>
            <stRef:documentID>uuid:E63A0664C49BDE11959BD33380A39837</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_AGM_Core/capture_currentpagedevice get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -327.167 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 327.167 li
505.875 327.167 li
505.875 0 li
cp
clp
[1 0 0 1 0 0 ] concat
128.292 10.25 mo
146.567 48.2222 166.234 84.5298 187.375 120.833 cv
187.689 121.747 188.413 122.691 188.708 123.583 cv
192.792 129.667 li
194.278 131.587 195.628 133.523 196.958 135.583 cv
208.079 151.923 219.212 168.162 231.958 183.333 cv
253.809 210.028 302.35 260.478 336.542 223.833 cv
357.36 201.051 361.756 157.962 362.208 128.667 cv
362.413 88.9731 355.913 48.186 344.458 10.25 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
.65098 .956863 .596078 rgb
f
.4 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
40.0415 293.917 mo
40.0415 10.25 li
433.708 10.25 li
433.708 293.917 li
40.0415 293.917 li
/1 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
@
.267 lw
[.5 4 ] 0 dsh
58.1245 293.917 mo
58.1245 10.25 li
58.1245 10.25 mo
58.1245 10.25 li
102.625 293.917 mo
102.625 10.25 li
102.625 10.25 mo
102.625 10.25 li
147.042 293.917 mo
147.042 10.25 li
147.042 10.25 mo
147.042 10.25 li
191.458 293.917 mo
191.458 10.25 li
191.458 10.25 mo
191.458 10.25 li
235.875 293.917 mo
235.875 10.25 li
235.875 10.25 mo
235.875 10.25 li
280.292 293.917 mo
280.292 10.25 li
280.292 10.25 mo
280.292 10.25 li
324.792 293.917 mo
324.792 10.25 li
324.792 10.25 mo
324.792 10.25 li
369.208 293.917 mo
369.208 10.25 li
369.208 10.25 mo
369.208 10.25 li
413.625 293.917 mo
413.625 10.25 li
413.625 10.25 mo
413.625 10.25 li
40.0415 280.5 mo
433.708 280.5 li
433.708 280.5 mo
433.708 280.5 li
40.0415 254.667 mo
433.708 254.667 li
433.708 254.667 mo
433.708 254.667 li
40.0415 228.917 mo
433.708 228.917 li
433.708 228.917 mo
433.708 228.917 li
40.0415 203.083 mo
433.708 203.083 li
433.708 203.083 mo
433.708 203.083 li
40.0415 177.25 mo
433.708 177.25 li
433.708 177.25 mo
433.708 177.25 li
40.0415 151.417 mo
433.708 151.417 li
433.708 151.417 mo
433.708 151.417 li
40.0415 125.583 mo
433.708 125.583 li
433.708 125.583 mo
433.708 125.583 li
40.0415 99.833 mo
433.708 99.833 li
433.708 99.833 mo
433.708 99.833 li
40.0415 74 mo
433.708 74 li
433.708 74 mo
433.708 74 li
40.0415 48.167 mo
433.708 48.167 li
433.708 48.167 mo
433.708 48.167 li
40.0415 22.333 mo
433.708 22.333 li
433.708 22.333 mo
433.708 22.333 li
0 0 0 rgb
@
.4 lw
[] 0 dsh
40.0415 10.25 mo
433.708 10.25 li
40.0415 293.917 mo
433.708 293.917 li
433.708 293.917 mo
433.708 10.25 li
40.0415 293.917 mo
40.0415 10.25 li
40.0415 293.917 mo
433.708 293.917 li
40.0415 293.917 mo
40.0415 10.25 li
58.1245 293.917 mo
58.1245 289.917 li
58.1245 10.25 mo
58.1245 14.167 li
@
102.625 293.917 mo
102.625 289.917 li
102.625 10.25 mo
102.625 14.167 li
@
147.042 293.917 mo
147.042 289.917 li
147.042 10.25 mo
147.042 14.167 li
@
191.458 293.917 mo
191.458 289.917 li
191.458 10.25 mo
191.458 14.167 li
@
235.875 293.917 mo
235.875 289.917 li
235.875 10.25 mo
235.875 14.167 li
@
280.292 293.917 mo
280.292 289.917 li
280.292 10.25 mo
280.292 14.167 li
@
324.792 293.917 mo
324.792 289.917 li
324.792 10.25 mo
324.792 14.167 li
@
369.208 293.917 mo
369.208 289.917 li
369.208 10.25 mo
369.208 14.167 li
@
413.625 293.917 mo
413.625 289.917 li
413.625 10.25 mo
413.625 14.167 li
@
40.0415 280.5 mo
43.9585 280.5 li
433.708 280.5 mo
429.708 280.5 li
@
40.0415 254.667 mo
43.9585 254.667 li
433.708 254.667 mo
429.708 254.667 li
@
40.0415 228.917 mo
43.9585 228.917 li
433.708 228.917 mo
429.708 228.917 li
@
40.0415 203.083 mo
43.9585 203.083 li
433.708 203.083 mo
429.708 203.083 li
@
40.0415 177.25 mo
43.9585 177.25 li
433.708 177.25 mo
429.708 177.25 li
@
40.0415 151.417 mo
43.9585 151.417 li
433.708 151.417 mo
429.708 151.417 li
@
40.0415 125.583 mo
43.9585 125.583 li
433.708 125.583 mo
429.708 125.583 li
@
40.0415 99.833 mo
43.9585 99.833 li
433.708 99.833 mo
429.708 99.833 li
@
40.0415 74 mo
43.9585 74 li
433.708 74 mo
429.708 74 li
@
40.0415 48.167 mo
43.9585 48.167 li
433.708 48.167 mo
429.708 48.167 li
@
40.0415 22.333 mo
43.9585 22.333 li
433.708 22.333 mo
429.708 22.333 li
@
40.0415 10.25 mo
433.708 10.25 li
40.0415 293.917 mo
433.708 293.917 li
433.708 293.917 mo
433.708 10.25 li
40.0415 293.917 mo
40.0415 10.25 li
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Helvetica def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 14 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 120 /x put
dup 127 /minus put
def
/FontBBox {-383 -301 1000 930} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/.notdef <1C60D8A8C9B825FA0C55D94CF30B04E91930F79B2A7531B6DFEACE
089BFA0CCAAA1D14> |-
/period <1C60D8A8C9B854D0E1F753FB5AABDD131446> |-
/zero <1C60D8A8C9B7EF322BBF1F82266BBD4B9611C385F544A0CCEE96B6AE4
2188E90E24DF941335ECDD73BE725E90AF31754E19888E82B5CEC4913DBDB6B1
C924F2A67C4FA25B889B8111BBE9FBE4C00971D0F11998C7C4A88EB02A6B778C
57549923AD272673333B691DC4E754432491AB59D65E578E883CFCF0E957A703
808F5DD3E1FFF7A74> |-
/one <1C60D8A8C9B7EF322B8B6F06EBA17FADAF5481D51ED20B092CC7EBA04A
7125E5D9244D77C370706CE7> |-
/two <1C60D8A8C9B7EF3224213EB85FBD9C6D71300177F873BBF084A7D7F39A
EA55DC01D315425BD2775BF3B72A90BA966DF306A6684F4218E628BDA8B47666
4EE767A0A7A9A46810E0DFFB925E0184087AE153C8CBE2F4A0CC1A78D1F5E20B
8092D34EF12439EC261739DFB370E150802B6590DAEAC876185F504C4784EC72
DC900C09BCF207AE6BBA9E53> |-
/three <1C60D8A8C9B7EF322476AABE780A0CC99AAD177B56FE00CEF2C335CA
AB00DDAE3533C301BD61DBF81331052D053045F1280E99BF9189D904D59FAD4C
572E628EBC877D6D2E55B93453CEFF15FCA24E0DEFEE26248CA584B448A0B7AB
C04DE143253611AE8B6136EBB6B9500C6FE1BF16D334AC0FC139C02D0E23312F
8A5DEE38D9DFFC967418857198A6F5E2B74E26A7400BAB2BCEAF07C13AEA7EEC
12E8FF7DD788F7DE3496DAFE94006B4C4624906E0542E822DD09B2F0EF18A293
CF165C00A0D4B0D4868742F6E7AD1F4C608844A27606AF7D236D70F8A5> |-
/five <1C60D8A8C9B7EF322425F9C8FBFED962591CF3F2454CB0420E5FD43BF
0A53E4577CC05A5911EBD9769A728538F52FBCB58F9C1624B00163BC34F1233E
937541D174245AEF119E8CC15F9499870A1FD713E12050D2C111D973B228569D
D4567D7B66C08D7A92B48C7C05EEA74AE0E991435E68F3A2F1A78A6E5DDDF451
75FD0D1681804560CE1E174F7396A92AC0FC521> |-
/x <1C60D8A8C9B7A73DD8337FBCF0C2D63054EEA9E6EF6761C446D537069798
98D5EBBD35F574275DFE38D1CFCB6DAAF2F7FB45B89808B993D15C26AAC2E957
B3> |-
/minus <1C60D8A8C9B7F374BD663D89EF27E70EF3058A35A14A> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/JNFKMP+Helvetica /Helvetica findfont def
/JNFKMP+Helvetica*1 
[
46{/.notdef}repeat /period /.notdef /zero /one /two /three /.notdef 
/five 66{/.notdef}repeat /x 6{/.notdef}repeat /minus 128{/.notdef}repeat
] JNFKMP+Helvetica nfnt
JNFKMP+Helvetica*1  [12 -1.46953e-015 -1.46953e-015 -12 0 0 ]mfnt sfnt
47.7915 307.917 mov
(\177) sh
54.7993 307.917 mov
(2) sh
87.2915 307.917 mov
(\177) sh
94.2993 307.917 mov
(1.5) sh
136.708 307.917 mov
(\177) sh
143.716 307.917 mov
(1) sh
176.125 307.917 mov
(\177) sh
183.133 307.917 mov
(0.5) sh
232.542 307.917 mov
(0) sh
271.958 307.917 mov
(0.5) sh
321.458 307.917 mov
(1) sh
360.875 307.917 mov
(1.5) sh
410.292 307.917 mov
(2) sh
23.458 284.917 mov
(\177) sh
30.4663 284.917 mov
(3) sh
13.458 259.083 mov
(\177) sh
20.4663 259.083 mov
(2.5) sh
23.458 233.333 mov
(\177) sh
30.4663 233.333 mov
(2) sh
13.458 207.5 mov
(\177) sh
20.4663 207.5 mov
(1.5) sh
23.458 181.667 mov
(\177) sh
30.4663 181.667 mov
(1) sh
13.458 155.833 mov
(\177) sh
20.4663 155.833 mov
(0.5) sh
30.458 130 mov
(0) sh
20.458 104.25 mov
(0.5) sh
30.458 78.4165 mov
(1) sh
20.458 52.5835 mov
(1.5) sh
30.458 26.75 mov
(2) sh
233.792 321.333 mov
(x) sh
gsave % PSGState
0 0 mo
439.351 0 li
439.351 327.167 li
0 327.167 li
0 0 li
cp
clp
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
JNFKMP+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/y <1C60D8A8C9B7A73DB6C769AECED4FFF06BD6C7D8EE9D80C33498354C234E
F8AB6FF886E43E95215746FDAC3F097DD7FCBB881E3C464814E4A3A916181580
046D0A1964BCADB1AE2F71311C394B641C94818A9C6CE0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JNFKMP+Helvetica /Encoding get
dup 121 /y put
pop
%ADOEndSubsetFont
/JNFKMP+Helvetica*1 
[
46{/.notdef}repeat /period /.notdef /zero /one /two /three /.notdef 
/five 66{/.notdef}repeat /x /y 5{/.notdef}repeat /minus 128{/.notdef}repeat
] JNFKMP+Helvetica nfnt
JNFKMP+Helvetica*1  [-6.7677e-016 -9.76212 -11.0529 5.97738e-016 0 0 ]mfnt sfnt
5.39404 149.008 mov
(y) sh
grestore % PSGState
191.651 125.58 mo
191.651 125.69 191.562 125.78 191.452 125.78 cv
191.341 125.78 191.251 125.69 191.251 125.58 cv
191.251 125.47 191.341 125.38 191.452 125.38 cv
191.562 125.38 191.651 125.47 191.651 125.58 cv
1 0 0 rgb
f
194.785 125.58 mo
194.785 127.42 193.292 128.913 191.452 128.913 cv
189.611 128.913 188.119 127.42 188.119 125.58 cv
188.119 123.74 189.611 122.247 191.452 122.247 cv
193.292 122.247 194.785 123.74 194.785 125.58 cv
f
gsave % PSGState
40.0415 294 mo
433.792 294 li
433.792 10.25 li
40.0415 10.25 li
40.0415 294 li
cp
clp
113.458 10.25 mo
125.678 40.5332 139.256 70.416 148.625 101.75 cv
151.889 113.152 154.498 125.561 151.125 137.25 cv
147.612 148.335 139.231 157.587 131.792 166.25 cv
121.327 178.482 110.699 190.333 100.708 203 cv
78.7944 230.332 58.5195 259.606 40.0415 289.333 cv
230.792 10.25 mo
249.417 31.3691 266.723 53.269 277.792 79.417 cv
285.624 97.498 292.319 124.146 285.708 143.5 cv
276.569 168.385 253.136 156.344 239.875 142.917 cv
236.666 139.765 233.267 135.756 230.875 131.917 cv
229.877 130.24 227.478 126.008 228.875 124.167 cv
229.517 123.039 230.995 123.05 232.125 123.25 cv
232.715 123.305 233.062 123.498 233.625 123.667 cv
234.125 123.917 li
234.208 124 li
234.375 124 li
234.542 124.083 li
234.625 124.167 li
234.792 124.25 li
234.875 124.333 li
0 0 1 rgb
@
grestore % PSGState
236.111 125.58 mo
236.111 125.69 236.021 125.78 235.912 125.78 cv
235.801 125.78 235.711 125.69 235.711 125.58 cv
235.711 125.47 235.801 125.38 235.912 125.38 cv
236.021 125.38 236.111 125.47 236.111 125.58 cv
f
239.185 125.58 mo
239.185 127.42 237.691 128.913 235.851 128.913 cv
234.011 128.913 232.519 127.42 232.519 125.58 cv
232.519 123.74 234.011 122.247 235.851 122.247 cv
237.691 122.247 239.185 123.74 239.185 125.58 cv
f
gsave % PSGState
40.0415 294 mo
433.792 294 li
433.792 10.25 li
40.0415 10.25 li
40.0415 294 li
cp
clp
364.292 10.25 mo
373.813 48.8452 378.99 89.1372 378.792 128.917 cv
378.493 157.414 375.411 189.017 365.208 215.833 cv
349.354 257.788 320.319 272.334 281.208 246.667 cv
255.295 229.493 233.533 202.741 214.625 178.25 cv
205.734 166.964 197.194 154.215 187.292 143.833 cv
178.236 134.585 172.458 136.96 162.542 143.333 cv
150.758 151.238 139.339 161.742 129.458 171.833 cv
95.1377 206.598 66.0483 248.379 40.0415 289.5 cv
311.375 10.25 mo
331.249 56.1309 344.722 121.092 330.708 170.5 cv
321.782 200.196 301.925 215.341 272.458 199 cv
254.27 189.022 237.648 170.526 225.208 154 cv
221.056 148.054 216.958 142.491 213.625 136 cv
212.212 133.495 210.81 130.497 210.208 127.667 cv
208.765 121.537 213.626 120.163 218.625 119.833 cv
221.992 119.503 226.26 120.1 229.458 121.167 cv
231.034 121.708 231.838 122.014 233.292 122.833 cv
233.744 123.038 234.082 123.382 234.542 123.583 cv
234.708 123.75 li
234.875 123.833 li
235.208 124.167 li
235.375 124.25 li
160.208 294 mo
122.021 257.385 93.7983 256.123 56.6245 294 cv
153.042 10.25 mo
171.95 40.8291 194.519 69.2188 221.042 93.5 cv
227.722 100.175 245.375 115.581 245.042 126.167 cv
244.665 129.882 241.657 130.034 238.792 128.75 cv
238.562 128.485 237.476 128.095 237.208 127.75 cv
237.125 127.667 li
236.958 127.583 li
236.708 127.333 li
236.542 127.25 li
236.292 127 li
236.208 126.833 li
236.125 126.75 li
236.042 126.75 li
235.875 126.583 li
235.875 126.5 li
235.542 126.167 li
235.542 126 li
235.375 125.833 li
235.375 125.5 li
235.458 125.417 li
235.625 125.417 li
235.708 125.5 li
235.792 125.5 li
235.875 125.583 li
134.458 10.25 mo
148.962 37.7051 164.315 65.874 182.458 91.167 cv
185.776 95.5698 189.016 100.052 192.792 104.083 cv
195.951 107.827 200.223 111.973 204.458 114.5 cv
207.541 116.349 209.635 116.994 213.042 117.833 cv
219.355 118.979 226.006 119.175 231.875 122 cv
233.417 122.651 234.279 123.404 235.542 124.333 cv
235.625 124.5 li
236.208 125.083 li
236.208 125.25 li
236.292 125.333 li
236.292 125.417 li
236.375 125.5 li
236.375 125.75 li
236.292 125.833 li
236.208 125.833 li
236.125 125.75 li
236.042 125.75 li
235.958 125.667 li
235.875 125.667 li
191.375 10.25 mo
208.288 29.9868 226.98 48.1821 243.292 68.333 cv
255.239 83.5679 267.15 102.383 268.958 122.083 cv
270.633 141 259.701 149.507 243.708 138.5 cv
240.319 136.2 237.187 133.424 234.708 130.167 cv
234.015 129.157 233.671 128.77 233.125 127.667 cv
233.042 127.417 li
232.875 127.167 li
232.792 126.917 li
232.708 126.75 li
232.625 126.5 li
232.625 126.333 li
232.542 126.167 li
232.542 125.25 li
232.625 125.167 li
232.625 125 li
232.792 124.833 li
232.792 124.75 li
232.875 124.667 li
232.958 124.667 li
233.042 124.583 li
233.125 124.583 li
233.208 124.5 li
233.292 124.5 li
233.375 124.417 li
233.542 124.417 li
233.708 124.417 233.875 124.417 234.042 124.417 cv
234.125 124.5 li
234.458 124.5 li
234.542 124.583 li
234.625 124.583 li
234.708 124.667 li
234.875 124.667 li
234.958 124.75 li
235.042 124.75 li
235.125 124.833 li
235.208 124.833 li
235.591 125.247 235.242 124.753 235.625 125.167 cv
66.4585 10.25 mo
73.1284 36.7021 79.0776 63.4199 82.3745 90.5 cv
91.4883 162.607 72.4165 206.689 40.0415 270.167 cv
128.958 10.25 mo
145.216 43.27 162.522 76.4741 181.875 107.833 cv
185.004 112.56 188.202 118.278 191.958 122.5 cv
192.258 122.8 192.557 123.099 192.875 123.333 cv
192.958 123.417 li
193.292 123.583 li
193.458 123.75 li
193.625 123.75 li
193.708 123.833 li
193.792 123.833 li
193.958 123.917 li
194.292 123.917 li
194.375 124 li
194.708 124 li
194.792 123.917 li
194.958 123.917 195.125 123.917 195.292 123.917 cv
195.375 123.833 li
195.625 123.833 li
195.708 123.75 li
195.958 123.75 li
196.042 123.667 li
196.292 123.667 li
196.458 123.583 li
196.542 123.5 li
196.708 123.5 li
196.875 123.417 li
197.313 123.392 197.712 123.169 198.125 123 cv
199.101 122.859 200.605 122.172 201.708 121.917 cv
203.673 121.442 205.704 120.847 207.708 120.5 cv
212.666 119.614 217.083 119.144 222.125 119.583 cv
226.402 120.076 229.754 120.904 233.542 122.917 cv
233.926 123.196 234.286 123.449 234.708 123.667 cv
234.792 123.833 li
235.125 124 li
235.208 124.167 li
235.375 124.333 li
235.542 124.417 li
235.625 124.5 li
235.625 124.583 li
235.708 124.667 li
235.792 124.667 li
236.042 124.917 li
236.042 125 li
236.208 125.167 li
236.208 125.333 li
236.375 125.5 li
236.375 125.667 li
236.292 125.75 li
236.208 125.75 li
127.958 10.25 mo
146.234 48.2222 165.901 84.5298 187.042 120.833 cv
187.356 121.747 188.08 122.691 188.375 123.583 cv
188.625 124.083 li
188.625 124.25 li
188.708 124.333 li
188.708 124.5 li
188.792 124.583 li
188.792 124.667 li
188.875 124.833 li
188.875 125 li
188.958 125.083 li
188.958 126.083 li
188.792 126.25 li
188.792 126.333 li
188.625 126.5 li
188.625 126.583 li
188.426 126.802 188.593 126.481 188.208 126.917 cv
188.125 126.917 li
187.958 127.083 li
187.875 127.083 li
187.708 127.25 li
187.625 127.25 li
187.458 127.333 li
187.375 127.417 li
187.292 127.417 li
187.125 127.5 li
186.958 127.667 li
186.792 127.667 li
185.792 128.167 li
185.625 128.333 li
184.59 128.717 183.203 129.629 182.125 130.083 cv
177.22 132.808 172.375 135.665 167.792 138.917 cv
155.374 147.386 144.036 157.348 133.292 167.833 cv
97.2793 203.665 67.0024 246.688 40.0415 289.5 cv
344.125 10.25 mo
355.58 48.186 362.08 88.9731 361.875 128.667 cv
361.423 157.962 357.027 201.051 336.208 223.833 cv
302.017 260.478 253.476 210.028 231.625 183.333 cv
218.879 168.162 207.746 151.923 196.625 135.583 cv
195.295 133.523 193.945 131.587 192.458 129.667 cv
191.918 128.807 191.28 128.053 190.542 127.417 cv
190.625 127.417 li
190.542 127.417 li
190.458 127.333 li
190.375 127.333 li
190.208 127.167 li
190.125 127.167 li
190.042 127.083 li
189.958 127.083 li
189.875 127 li
189.708 127 li
189.625 126.917 li
188.958 126.917 li
188.875 127 li
188.625 127 li
188.542 127.083 li
188.375 127.083 li
188.292 127.167 li
188.125 127.167 li
188.042 127.25 li
187.958 127.25 li
187.875 127.333 li
187.792 127.333 li
187.625 127.417 li
187.542 127.417 li
187.458 127.5 li
187.292 127.5 li
187.208 127.583 li
186.875 127.75 li
186.708 127.75 li
186.625 127.833 li
186.125 128.083 li
184.458 128.893 182.788 129.758 181.125 130.667 cv
170.533 136.454 160.708 143.595 151.458 151.333 cv
138.58 162.079 126.512 174.307 115.292 186.75 cv
87.2993 218.361 62.3965 253.761 40.0415 289.5 cv
339.542 10.25 mo
354.49 58.0371 362.175 111.203 355.875 161.167 cv
352.415 186.094 342.148 225.909 312.625 231.417 cv
270.315 238.071 221.152 169.317 199.958 136.167 cv
198.243 133.401 196.532 130.544 195.125 127.667 cv
195.042 127.417 li
194.958 127.25 li
194.958 127.083 li
194.875 127 li
194.792 126.833 li
194.792 126.75 li
194.708 126.583 li
194.708 126.333 li
194.625 126.25 li
194.625 125.917 li
194.542 125.833 li
194.542 125.417 li
194.625 125.333 li
194.625 125.083 li
194.708 125 li
194.708 124.917 li
195.125 124.5 li
195.125 124.417 li
195.208 124.417 li
195.292 124.333 li
195.375 124.333 li
195.542 124.167 li
195.625 124.167 li
195.708 124.083 li
195.792 124.083 li
195.875 124 li
195.958 124 li
196.042 123.917 li
196.125 123.917 li
196.208 123.833 li
196.375 123.833 li
196.542 123.667 li
196.708 123.667 li
196.792 123.583 li
196.958 123.5 li
197.125 123.5 li
197.292 123.417 li
197.375 123.333 li
197.923 123.243 198.411 122.951 198.958 122.833 cv
202.889 121.487 206.923 120.525 211.042 119.917 cv
218.721 118.853 229.898 119.16 235.875 124.75 cv
235.792 124.75 li
235.875 124.75 li
236.042 124.917 li
236.042 125 li
236.208 125.167 li
236.208 125.25 li
236.292 125.333 li
236.292 125.5 li
236.375 125.583 li
236.375 125.667 li
236.292 125.75 li
0 0 1 rgb
@
grestore % PSGState
58.7085 280.333 mo
53.7915 286 li
57.7085 285.083 li
53.7915 286 li
52.8745 283.583 li
58.7085 266.833 mo
54.3745 272.833 li
58.2915 271.667 li
54.3745 272.833 li
53.1245 270.417 li
58.7085 253.333 mo
54.9585 259.583 li
58.7915 258.25 li
54.9585 259.583 li
53.3745 257.167 li
58.7085 239.833 mo
55.4585 246.25 li
59.2085 244.833 li
55.4585 246.25 li
53.7085 243.833 li
58.7085 226.333 mo
55.9585 233 li
59.6245 231.417 li
55.9585 233 li
53.9585 230.583 li
58.7085 212.833 mo
56.4585 219.667 li
60.0415 217.917 li
56.4585 219.667 li
54.2085 217.25 li
58.7085 199.333 mo
56.8745 206.333 li
60.4585 204.5 li
56.8745 206.333 li
54.3745 203.917 li
58.7085 185.833 mo
57.2085 193 li
60.7915 191 li
57.2085 193 li
54.6245 190.583 li
58.7085 172.333 mo
57.6245 179.583 li
61.1245 177.583 li
57.6245 179.583 li
54.7915 177.25 li
58.7085 158.833 mo
57.9585 166.25 li
61.3745 164.083 li
57.9585 166.25 li
55.0415 163.917 li
58.7085 145.25 mo
58.2915 152.833 li
61.7085 150.667 li
58.2915 152.833 li
55.2085 150.5 li
58.7085 131.75 mo
58.6245 139.417 li
61.9585 137.167 li
58.6245 139.417 li
55.3745 137.167 li
58.7085 118.25 mo
58.8745 126.083 li
62.2085 123.667 li
58.8745 126.083 li
55.5415 123.75 li
58.7085 104.75 mo
59.2085 112.667 li
62.4585 110.25 li
59.2085 112.667 li
55.6245 110.333 li
58.7085 91.25 mo
59.4585 99.25 li
62.7085 96.75 li
59.4585 99.25 li
55.7915 96.917 li
58.7085 77.75 mo
59.7085 85.833 li
62.8745 83.25 li
59.7085 85.833 li
55.9585 83.583 li
58.7085 64.25 mo
59.9585 72.417 li
63.1245 69.833 li
59.9585 72.417 li
56.0415 70.167 li
58.7085 50.75 mo
60.1245 59 li
63.2915 56.333 li
60.1245 59 li
56.1245 56.75 li
58.7085 37.25 mo
60.3745 45.583 li
63.4585 42.833 li
60.3745 45.583 li
56.2915 43.333 li
58.7085 23.75 mo
60.5415 32.167 li
63.6245 29.333 li
60.5415 32.167 li
56.3745 29.917 li
77.4585 280.333 mo
70.9585 284.333 li
74.6245 284.083 li
70.9585 284.333 li
71.2085 282.25 li
77.4585 266.833 mo
71.7085 271.333 li
75.3745 270.833 li
71.7085 271.333 li
71.5415 269.167 li
77.4585 253.333 mo
72.4585 258.333 li
76.1245 257.5 li
72.4585 258.333 li
71.8745 256.083 li
77.4585 239.833 mo
73.2085 245.167 li
76.7915 244.167 li
73.2085 245.167 li
72.2085 242.917 li
77.4585 226.333 mo
73.8745 232 li
77.3745 230.833 li
73.8745 232 li
72.5415 229.75 li
77.4585 212.833 mo
74.5415 218.75 li
77.9585 217.417 li
74.5415 218.75 li
72.8745 216.5 li
77.4585 199.333 mo
75.1245 205.5 li
78.4585 204 li
75.1245 205.5 li
73.2085 203.25 li
77.4585 185.833 mo
75.6245 192.167 li
78.8745 190.5 li
75.6245 192.167 li
73.4585 190 li
77.4585 172.333 mo
76.1245 178.833 li
79.3745 177.083 li
76.1245 178.833 li
73.7085 176.667 li
77.4585 158.833 mo
76.5415 165.5 li
79.7085 163.667 li
76.5415 165.5 li
73.9585 163.333 li
77.4585 145.25 mo
76.9585 152.167 li
80.0415 150.167 li
76.9585 152.167 li
74.1245 150 li
77.4585 131.75 mo
77.2915 138.833 li
80.3745 136.75 li
77.2915 138.833 li
74.3745 136.667 li
77.4585 118.25 mo
77.7085 125.417 li
80.7085 123.25 li
77.7085 125.417 li
74.5415 123.333 li
77.4585 104.75 mo
78.0415 112 li
80.9585 109.75 li
78.0415 112 li
74.7085 109.917 li
77.4585 91.25 mo
78.2915 98.667 li
81.2085 96.333 li
78.2915 98.667 li
74.8745 96.583 li
77.4585 77.75 mo
78.5415 85.25 li
81.4585 82.833 li
78.5415 85.25 li
75.0415 83.167 li
77.4585 64.25 mo
78.8745 71.833 li
81.7085 69.417 li
78.8745 71.833 li
75.1245 69.75 li
77.4585 50.75 mo
79.1245 58.417 li
81.9585 55.917 li
79.1245 58.417 li
75.2915 56.333 li
77.4585 37.25 mo
79.2915 45.083 li
82.1245 42.417 li
79.2915 45.083 li
75.3745 43 li
77.4585 23.75 mo
79.5415 31.667 li
82.3745 29 li
79.5415 31.667 li
75.5415 29.583 li
96.2085 280.333 mo
88.0415 281.583 li
90.9585 282.417 li
88.0415 281.583 li
89.9585 280 li
96.2085 266.833 mo
88.6245 268.917 li
91.7915 269.417 li
88.6245 268.917 li
90.0415 267.167 li
96.2085 253.333 mo
89.3745 256.25 li
92.7085 256.333 li
89.3745 256.25 li
90.2085 254.333 li
96.2085 239.833 mo
90.2915 243.417 li
93.6245 243.25 li
90.2915 243.417 li
90.5415 241.5 li
96.2085 226.333 mo
91.2915 230.583 li
94.5415 230 li
91.2915 230.583 li
90.9585 228.583 li
96.2085 212.833 mo
92.2085 217.5 li
95.3745 216.75 li
92.2085 217.5 li
91.3745 215.5 li
96.2085 199.333 mo
93.0415 204.417 li
96.2085 203.333 li
93.0415 204.417 li
91.7915 202.417 li
96.2085 185.833 mo
93.7915 191.25 li
96.8745 190 li
93.7915 191.25 li
92.2085 189.25 li
96.2085 172.333 mo
94.4585 178 li
97.4585 176.583 li
94.4585 178 li
92.5415 176 li
96.2085 158.833 mo
95.0415 164.75 li
97.9585 163.083 li
95.0415 164.75 li
92.8745 162.75 li
96.2085 145.25 mo
95.5415 151.417 li
98.3745 149.667 li
95.5415 151.417 li
93.1245 149.5 li
96.2085 131.75 mo
96.0415 138.083 li
98.7915 136.25 li
96.0415 138.083 li
93.3745 136.167 li
96.2085 118.25 mo
96.4585 124.75 li
99.2085 122.75 li
96.4585 124.75 li
93.6245 122.833 li
96.2085 104.75 mo
96.8745 111.417 li
99.5415 109.333 li
96.8745 111.417 li
93.7915 109.5 li
96.2085 91.25 mo
97.2085 98 li
99.7915 95.833 li
97.2085 98 li
93.9585 96.167 li
96.2085 77.75 mo
97.5415 84.667 li
100.125 82.417 li
97.5415 84.667 li
94.1245 82.75 li
96.2085 64.25 mo
97.7915 71.25 li
100.375 68.917 li
97.7915 71.25 li
94.2915 69.417 li
96.2085 50.75 mo
98.1245 57.917 li
100.625 55.5 li
98.1245 57.917 li
94.4585 56 li
96.2085 37.25 mo
98.3745 44.5 li
100.875 42 li
98.3745 44.5 li
94.6245 42.583 li
96.2085 23.75 mo
98.5415 31.083 li
101.042 28.5 li
98.5415 31.083 li
94.7085 29.25 li
114.958 280.333 mo
107.042 278.333 li
108.542 280.083 li
107.042 278.333 li
110.292 277.833 li
114.958 266.833 mo
107.042 265.5 li
108.875 267.083 li
107.042 265.5 li
110.042 264.75 li
114.958 253.333 mo
107.125 252.833 li
109.292 254.167 li
107.125 252.833 li
109.708 251.833 li
114.958 239.833 mo
107.458 240.333 li
109.875 241.333 li
107.458 240.333 li
109.458 239.083 li
114.958 226.333 mo
108.042 227.917 li
110.792 228.5 li
108.042 227.917 li
109.458 226.417 li
114.958 212.833 mo
109.042 215.5 li
111.958 215.583 li
109.042 215.5 li
109.708 213.833 li
114.958 199.333 mo
110.208 202.833 li
113.208 202.5 li
110.208 202.833 li
110.125 201.083 li
114.958 185.833 mo
111.375 190 li
114.292 189.25 li
111.375 190 li
110.708 188.25 li
114.958 172.333 mo
112.458 177 li
115.208 175.917 li
112.458 177 li
111.208 175.167 li
114.958 158.833 mo
113.375 163.833 li
116.042 162.583 li
113.375 163.833 li
111.708 162.083 li
114.958 145.25 mo
114.125 150.583 li
116.625 149.167 li
114.125 150.583 li
112.042 148.917 li
114.958 131.75 mo
114.708 137.333 li
117.208 135.75 li
114.708 137.333 li
112.375 135.667 li
114.958 118.25 mo
115.292 124.083 li
117.708 122.25 li
115.292 124.083 li
112.708 122.333 li
114.958 104.75 mo
115.708 110.75 li
118.042 108.833 li
115.708 110.75 li
112.958 109.083 li
114.958 91.25 mo
116.125 97.417 li
118.458 95.417 li
116.125 97.417 li
113.125 95.75 li
114.958 77.75 mo
116.542 84 li
118.792 81.917 li
116.542 84 li
113.375 82.333 li
114.958 64.25 mo
116.875 70.667 li
119.042 68.5 li
116.875 70.667 li
113.542 69 li
114.958 50.75 mo
117.125 57.333 li
119.292 55 li
117.125 57.333 li
113.708 55.667 li
114.958 37.25 mo
117.458 43.917 li
119.542 41.583 li
117.458 43.917 li
113.792 42.25 li
114.958 23.75 mo
117.708 30.583 li
119.792 28.083 li
117.708 30.583 li
113.958 28.917 li
133.708 280.333 mo
127.042 276.5 li
127.375 278.583 li
127.042 276.5 li
130.708 276.667 li
133.708 266.833 mo
127.042 263.333 li
127.542 265.333 li
127.042 263.333 li
130.542 263.417 li
133.708 253.333 mo
127.042 250.25 li
127.708 252.167 li
127.042 250.25 li
130.375 250.25 li
133.708 239.833 mo
126.958 237.333 li
127.875 239 li
126.958 237.333 li
130.125 237.083 li
133.708 226.333 mo
126.958 224.5 li
128.125 226 li
126.958 224.5 li
129.792 224.083 li
133.708 212.833 mo
126.875 211.917 li
128.542 213.167 li
126.875 211.917 li
129.375 211.167 li
133.708 199.333 mo
127.208 199.667 li
129.292 200.5 li
127.208 199.667 li
129.042 198.583 li
133.708 185.833 mo
128.125 187.667 li
130.625 187.917 li
128.125 187.667 li
129.042 186.25 li
133.708 172.333 mo
129.708 175.333 li
132.208 175 li
129.708 175.333 li
129.542 173.833 li
133.708 158.833 mo
131.208 162.667 li
133.625 161.833 li
131.208 162.667 li
130.292 161.167 li
133.708 145.25 mo
132.458 149.667 li
134.708 148.5 li
132.458 149.667 li
130.958 148.167 li
133.708 131.75 mo
133.375 136.5 li
135.542 135.167 li
133.375 136.5 li
131.458 135.083 li
133.708 118.25 mo
134.125 123.333 li
136.125 121.75 li
134.125 123.333 li
131.792 121.833 li
133.708 104.75 mo
134.708 110 li
136.708 108.333 li
134.708 110 li
132.125 108.583 li
133.708 91.25 mo
135.208 96.75 li
137.125 94.833 li
135.208 96.75 li
132.375 95.333 li
133.708 77.75 mo
135.625 83.417 li
137.458 81.417 li
135.625 83.417 li
132.625 82 li
133.708 64.25 mo
135.958 70.083 li
137.792 68 li
135.958 70.083 li
132.792 68.667 li
133.708 50.75 mo
136.292 56.75 li
138.125 54.583 li
136.292 56.75 li
132.958 55.333 li
133.708 37.25 mo
136.542 43.333 li
138.375 41.083 li
136.542 43.333 li
133.042 41.917 li
133.708 23.75 mo
136.792 30 li
138.625 27.667 li
136.792 30 li
133.208 28.583 li
152.458 280.333 mo
146.708 275.5 li
146.375 277.833 li
146.708 275.5 li
150.542 276.167 li
152.458 266.833 mo
146.792 262.25 li
146.542 264.417 li
146.792 262.25 li
150.458 262.833 li
152.458 253.333 mo
146.875 249 li
146.708 251.083 li
146.875 249 li
150.458 249.5 li
152.458 239.833 mo
146.958 235.833 li
146.875 237.833 li
146.958 235.833 li
150.375 236.25 li
152.458 226.333 mo
146.958 222.667 li
147.042 224.583 li
146.958 222.667 li
150.208 223 li
152.458 212.833 mo
147.042 209.583 li
147.292 211.333 li
147.042 209.583 li
150.042 209.75 li
152.458 199.333 mo
146.958 196.667 li
147.458 198.25 li
146.958 196.667 li
149.792 196.667 li
152.458 185.833 mo
146.958 183.917 li
147.792 185.25 li
146.958 183.917 li
149.375 183.667 li
152.458 172.333 mo
146.875 171.75 li
148.292 172.75 li
146.875 171.75 li
148.792 171.083 li
152.458 158.833 mo
147.875 160.333 li
149.875 160.5 li
147.875 160.333 li
148.625 159.167 li
152.458 145.25 mo
150.208 148.333 li
152.208 147.75 li
150.208 148.333 li
149.542 147.083 li
152.458 131.75 mo
151.958 135.583 li
153.708 134.5 li
151.958 135.583 li
150.458 134.333 li
152.458 118.25 mo
153.042 122.5 li
154.625 121.167 li
153.042 122.5 li
151.042 121.333 li
152.458 104.75 mo
153.792 109.25 li
155.292 107.75 li
153.792 109.25 li
151.458 108.083 li
152.458 91.25 mo
154.292 96.083 li
155.792 94.333 li
154.292 96.083 li
151.708 94.917 li
152.458 77.75 mo
154.792 82.75 li
156.208 80.917 li
154.792 82.75 li
151.958 81.583 li
152.458 64.25 mo
155.125 69.5 li
156.625 67.5 li
155.125 69.5 li
152.125 68.25 li
152.458 50.75 mo
155.458 56.167 li
156.875 54.083 li
155.458 56.167 li
152.208 55 li
152.458 37.25 mo
155.708 42.833 li
157.208 40.667 li
155.708 42.833 li
152.375 41.583 li
152.458 23.75 mo
155.958 29.5 li
157.458 27.25 li
155.958 29.5 li
152.458 28.25 li
171.208 280.333 mo
166.042 275 li
165.208 277.333 li
166.042 275 li
169.875 275.833 li
171.208 266.833 mo
166.125 261.667 li
165.458 263.917 li
166.125 261.667 li
169.875 262.5 li
171.208 253.333 mo
166.292 248.333 li
165.625 250.583 li
166.292 248.333 li
169.875 249.167 li
171.208 239.833 mo
166.375 235.083 li
165.792 237.167 li
166.375 235.083 li
169.875 235.833 li
171.208 226.333 mo
166.542 221.833 li
166.042 223.833 li
166.542 221.833 li
169.875 222.5 li
171.208 212.833 mo
166.708 208.583 li
166.208 210.5 li
166.708 208.583 li
169.875 209.167 li
171.208 199.333 mo
166.875 195.417 li
166.458 197.25 li
166.875 195.417 li
169.875 195.917 li
171.208 185.833 mo
166.958 182.333 li
166.708 184 li
166.958 182.333 li
169.792 182.75 li
171.208 172.333 mo
167.125 169.25 li
167.042 170.75 li
167.125 169.25 li
169.625 169.583 li
171.208 158.833 mo
167.208 156.5 li
167.458 157.833 li
167.208 156.5 li
169.375 156.583 li
171.208 145.25 mo
167.125 144.667 li
168.042 145.417 li
167.125 144.667 li
168.625 144.25 li
171.208 131.75 mo
170.042 134.25 li
171.458 133.667 li
170.042 134.25 li
169.292 133.333 li
171.208 118.25 mo
172.042 121.583 li
173.208 120.417 li
172.042 121.583 li
170.375 120.667 li
171.208 104.75 mo
172.958 108.5 li
174.042 107.167 li
172.958 108.5 li
170.875 107.667 li
171.208 91.25 mo
173.625 95.333 li
174.625 93.75 li
173.625 95.333 li
171.125 94.5 li
171.208 77.75 mo
174.042 82.167 li
175.042 80.417 li
174.042 82.167 li
171.292 81.25 li
171.208 64.25 mo
174.375 68.917 li
175.458 67.083 li
174.375 68.917 li
171.375 68 li
171.208 50.75 mo
174.625 55.667 li
175.708 53.667 li
174.625 55.667 li
171.542 54.667 li
171.208 37.25 mo
174.958 42.333 li
176.042 40.25 li
174.958 42.333 li
171.625 41.333 li
171.208 23.75 mo
175.125 29.083 li
176.292 26.833 li
175.125 29.083 li
171.708 28 li
189.958 280.333 mo
185.042 274.667 li
184.042 277.083 li
185.042 274.667 li
188.958 275.667 li
189.958 266.833 mo
185.208 261.333 li
184.208 263.667 li
185.208 261.333 li
188.958 262.333 li
189.958 253.333 mo
185.375 248 li
184.458 250.25 li
185.375 248 li
189.042 248.917 li
189.958 239.833 mo
185.542 234.667 li
184.625 236.917 li
185.542 234.667 li
189.042 235.583 li
189.958 226.333 mo
185.708 221.417 li
184.875 223.5 li
185.708 221.417 li
189.125 222.25 li
189.958 212.833 mo
185.875 208.167 li
185.125 210.167 li
185.875 208.167 li
189.125 208.917 li
189.958 199.333 mo
186.125 194.917 li
185.375 196.75 li
186.125 194.917 li
189.208 195.667 li
189.958 185.833 mo
186.375 181.667 li
185.625 183.417 li
186.375 181.667 li
189.208 182.417 li
189.958 172.333 mo
186.625 168.5 li
186.042 170.167 li
186.625 168.5 li
189.292 169.167 li
189.958 158.833 mo
186.958 155.417 li
186.458 156.833 li
186.958 155.417 li
189.292 156 li
189.958 145.25 mo
187.458 142.5 li
186.958 143.667 li
187.458 142.5 li
189.375 142.917 li
189.958 131.75 mo
188.125 130 li
187.958 130.75 li
188.125 130 li
189.458 130.25 li
189.958 118.25 mo
191.625 120.417 li
192.042 119.583 li
191.625 120.417 li
190.208 120 li
189.958 104.75 mo
192.458 107.75 li
192.958 106.5 li
192.458 107.75 li
190.375 107.25 li
189.958 91.25 mo
192.875 94.75 li
193.542 93.25 li
192.875 94.75 li
190.542 94.167 li
189.958 77.75 mo
193.292 81.667 li
193.958 80 li
193.292 81.667 li
190.625 80.917 li
189.958 64.25 mo
193.542 68.5 li
194.292 66.667 li
193.542 68.5 li
190.625 67.75 li
189.958 50.75 mo
193.792 55.25 li
194.625 53.333 li
193.792 55.25 li
190.708 54.417 li
189.958 37.25 mo
194.042 42 li
194.875 40 li
194.042 42 li
190.792 41.167 li
189.958 23.75 mo
194.208 28.667 li
195.125 26.583 li
194.208 28.667 li
190.792 27.833 li
208.708 280.333 mo
203.875 274.583 li
202.875 277 li
203.875 274.583 li
207.875 275.583 li
208.708 266.833 mo
204.042 261.25 li
203.042 263.583 li
204.042 261.25 li
207.875 262.25 li
208.708 253.333 mo
204.208 247.917 li
203.208 250.167 li
204.208 247.917 li
207.958 248.833 li
208.708 239.833 mo
204.375 234.583 li
203.458 236.75 li
204.375 234.583 li
207.958 235.5 li
208.708 226.333 mo
204.625 221.25 li
203.625 223.417 li
204.625 221.25 li
208.042 222.167 li
208.708 212.833 mo
204.792 208 li
203.875 210 li
204.792 208 li
208.042 208.833 li
208.708 199.333 mo
205.042 194.667 li
204.125 196.583 li
205.042 194.667 li
208.125 195.583 li
208.708 185.833 mo
205.292 181.417 li
204.458 183.25 li
205.292 181.417 li
208.208 182.25 li
208.708 172.333 mo
205.625 168.25 li
204.792 169.917 li
205.625 168.25 li
208.292 169 li
208.708 158.833 mo
206.042 155.083 li
205.292 156.583 li
206.042 155.083 li
208.458 155.833 li
208.708 145.25 mo
206.625 142.083 li
205.875 143.333 li
206.625 142.083 li
208.625 142.75 li
208.708 131.75 mo
207.625 129.167 li
206.792 130.167 li
207.625 129.167 li
209.042 129.833 li
208.708 118.25 mo
211.625 118.833 li
211.042 118.25 li
211.625 118.833 li
210.542 119.083 li
208.708 104.75 mo
211.708 107.25 li
211.875 106.083 li
211.708 107.25 li
209.792 106.917 li
208.708 91.25 mo
212.042 94.417 li
212.375 93 li
212.042 94.417 li
209.625 93.917 li
208.708 77.75 mo
212.292 81.333 li
212.792 79.75 li
212.292 81.333 li
209.625 80.833 li
208.708 64.25 mo
212.542 68.25 li
213.125 66.5 li
212.542 68.25 li
209.708 67.583 li
208.708 50.75 mo
212.708 55 li
213.375 53.167 li
212.708 55 li
209.708 54.333 li
208.708 37.25 mo
212.958 41.833 li
213.625 39.833 li
212.958 41.833 li
209.708 41.083 li
208.708 23.75 mo
213.125 28.5 li
213.875 26.417 li
213.125 28.5 li
209.708 27.75 li
227.458 280.333 mo
222.625 274.583 li
221.542 277 li
222.625 274.583 li
226.542 275.583 li
227.458 266.833 mo
222.792 261.25 li
221.792 263.583 li
222.792 261.25 li
226.625 262.25 li
227.458 253.333 mo
222.958 247.917 li
221.958 250.167 li
222.958 247.917 li
226.625 248.917 li
227.458 239.833 mo
223.125 234.583 li
222.125 236.833 li
223.125 234.583 li
226.625 235.583 li
227.458 226.333 mo
223.292 221.333 li
222.375 223.417 li
223.292 221.333 li
226.708 222.167 li
227.458 212.833 mo
223.458 208 li
222.625 210 li
223.458 208 li
226.792 208.917 li
227.458 199.333 mo
223.708 194.75 li
222.875 196.667 li
223.708 194.75 li
226.792 195.583 li
227.458 185.833 mo
223.958 181.5 li
223.208 183.333 li
223.958 181.5 li
226.875 182.333 li
227.458 172.333 mo
224.292 168.333 li
223.542 170 li
224.292 168.333 li
226.958 169.083 li
227.458 158.833 mo
224.708 155.167 li
223.958 156.667 li
224.708 155.167 li
227.042 155.917 li
227.458 145.25 mo
225.208 142.167 li
224.542 143.417 li
225.208 142.167 li
227.208 142.75 li
227.458 131.75 mo
226.208 129.333 li
225.542 130.25 li
226.208 129.333 li
227.625 129.917 li
227.458 118.25 mo
229.958 119.583 li
229.792 118.833 li
229.958 119.583 li
228.625 119.583 li
227.458 104.75 mo
230.292 107.417 li
230.542 106.167 li
230.292 107.417 li
228.292 107 li
227.458 91.25 mo
230.625 94.5 li
231.042 93.083 li
230.625 94.5 li
228.292 94 li
227.458 77.75 mo
230.958 81.417 li
231.458 79.833 li
230.958 81.417 li
228.292 80.833 li
227.458 64.25 mo
231.208 68.333 li
231.792 66.5 li
231.208 68.333 li
228.292 67.667 li
227.458 50.75 mo
231.458 55.083 li
232.125 53.25 li
231.458 55.083 li
228.375 54.333 li
227.458 37.25 mo
231.625 41.833 li
232.375 39.833 li
231.625 41.833 li
228.375 41.083 li
227.458 23.75 mo
231.792 28.583 li
232.625 26.5 li
231.792 28.583 li
228.458 27.75 li
.7 .7 .7 rgb
@
gsave % PSGState
40.0415 294 mo
433.792 294 li
433.792 10.25 li
40.0415 10.25 li
40.0415 294 li
cp
clp
246.208 280.333 mo
241.125 274.75 li
240.292 277.167 li
241.125 274.75 li
245.042 275.75 li
246.208 266.833 mo
241.292 261.5 li
240.458 263.833 li
241.292 261.5 li
245.125 262.333 li
246.208 253.333 mo
241.458 248.167 li
240.625 250.417 li
241.458 248.167 li
245.125 249 li
246.208 239.833 mo
241.625 234.833 li
240.875 237 li
241.625 234.833 li
245.125 235.667 li
246.208 226.333 mo
241.792 221.583 li
241.042 223.667 li
241.792 221.583 li
245.125 222.333 li
246.208 212.833 mo
241.958 208.333 li
241.292 210.25 li
241.958 208.333 li
245.208 209.083 li
246.208 199.333 mo
242.125 195.083 li
241.542 196.917 li
242.125 195.083 li
245.208 195.75 li
246.208 185.833 mo
242.375 181.917 li
241.875 183.667 li
242.375 181.917 li
245.208 182.5 li
246.208 172.333 mo
242.625 168.75 li
242.208 170.333 li
242.625 168.75 li
245.208 169.333 li
246.208 158.833 mo
242.875 155.75 li
242.542 157.167 li
242.875 155.75 li
245.208 156.167 li
246.208 145.25 mo
243.125 143.083 li
243.042 144.167 li
243.125 143.083 li
245.042 143.25 li
246.208 131.75 mo
243.458 132.417 li
244.542 132.583 li
243.458 132.417 li
244.042 131.833 li
246.208 118.25 mo
247.375 121 li
248.208 120 li
247.375 121 li
245.875 120.333 li
246.208 104.75 mo
248.292 108.083 li
249.125 106.833 li
248.292 108.083 li
246.292 107.417 li
246.208 91.25 mo
248.875 95 li
249.708 93.5 li
248.875 95 li
246.458 94.25 li
246.208 77.75 mo
249.292 81.833 li
250.125 80.167 li
249.292 81.833 li
246.625 81.083 li
246.208 64.25 mo
249.625 68.667 li
250.458 66.833 li
249.625 68.667 li
246.708 67.833 li
246.208 50.75 mo
249.875 55.417 li
250.792 53.5 li
249.875 55.417 li
246.792 54.5 li
246.208 37.25 mo
250.125 42.167 li
251.042 40.083 li
250.125 42.167 li
246.792 41.25 li
246.208 23.75 mo
250.292 28.833 li
251.292 26.667 li
250.292 28.833 li
246.875 27.917 li
264.958 280.333 mo
259.542 275.167 li
258.958 277.5 li
259.542 275.167 li
263.375 275.917 li
264.958 266.833 mo
259.625 261.917 li
259.125 264.167 li
259.625 261.917 li
263.375 262.583 li
264.958 253.333 mo
259.708 248.583 li
259.292 250.833 li
259.708 248.583 li
263.375 249.25 li
264.958 239.833 mo
259.875 235.333 li
259.458 237.417 li
259.875 235.333 li
263.292 236 li
264.958 226.333 mo
259.958 222.167 li
259.625 224.083 li
259.958 222.167 li
263.292 222.667 li
264.958 212.833 mo
260.042 209 li
259.875 210.833 li
260.042 209 li
263.208 209.417 li
264.958 199.333 mo
260.125 195.833 li
260.125 197.583 li
260.125 195.833 li
263.042 196.167 li
264.958 185.833 mo
260.208 182.833 li
260.375 184.417 li
260.208 182.833 li
262.875 183.083 li
264.958 172.333 mo
260.208 170.083 li
260.625 171.417 li
260.208 170.083 li
262.542 170.083 li
264.958 158.833 mo
260.042 157.917 li
261.125 158.917 li
260.042 157.917 li
261.958 157.5 li
264.958 145.25 mo
261.458 147 li
263.208 147 li
261.458 147 li
261.708 146 li
264.958 131.75 mo
264.208 134.917 li
265.792 134.083 li
264.208 134.917 li
263.042 133.917 li
264.958 118.25 mo
265.625 122 li
267.042 120.833 li
265.625 122 li
263.792 121 li
264.958 104.75 mo
266.458 108.917 li
267.792 107.417 li
266.458 108.917 li
264.208 107.833 li
264.958 91.25 mo
267.042 95.667 li
268.292 94.083 li
267.042 95.667 li
264.542 94.667 li
264.958 77.75 mo
267.542 82.417 li
268.792 80.667 li
267.542 82.417 li
264.708 81.417 li
264.958 64.25 mo
267.875 69.167 li
269.125 67.25 li
267.875 69.167 li
264.875 68.083 li
264.958 50.75 mo
268.208 55.917 li
269.458 53.833 li
268.208 55.917 li
264.958 54.833 li
264.958 37.25 mo
268.458 42.583 li
269.708 40.417 li
268.458 42.583 li
265.125 41.5 li
264.958 23.75 mo
268.708 29.25 li
269.958 27.083 li
268.708 29.25 li
265.208 28.167 li
283.708 280.333 mo
277.542 275.917 li
277.458 278.167 li
277.542 275.917 li
281.292 276.333 li
283.708 266.833 mo
277.625 262.667 li
277.625 264.833 li
277.625 262.667 li
281.208 263.083 li
283.708 253.333 mo
277.625 249.5 li
277.792 251.5 li
277.625 249.5 li
281.125 249.75 li
283.708 239.833 mo
277.625 236.333 li
277.958 238.25 li
277.625 236.333 li
280.958 236.5 li
283.708 226.333 mo
277.625 223.333 li
278.125 225.083 li
277.625 223.333 li
280.792 223.333 li
283.708 212.833 mo
277.542 210.417 li
278.375 212 li
277.542 210.417 li
280.458 210.25 li
283.708 199.333 mo
277.542 197.75 li
278.708 199.083 li
277.542 197.75 li
280.042 197.333 li
283.708 185.833 mo
277.542 185.5 li
279.292 186.5 li
277.542 185.5 li
279.542 184.75 li
283.708 172.333 mo
278.458 173.75 li
280.625 174.083 li
278.458 173.75 li
279.375 172.583 li
283.708 158.833 mo
280.292 161.75 li
282.542 161.333 li
280.292 161.75 li
280.042 160.333 li
283.708 145.25 mo
282.042 149.083 li
284.125 148.167 li
282.042 149.083 li
280.875 147.667 li
283.708 131.75 mo
283.292 136 li
285.208 134.833 li
283.292 136 li
281.542 134.667 li
283.708 118.25 mo
284.125 122.833 li
285.958 121.417 li
284.125 122.833 li
282.042 121.583 li
283.708 104.75 mo
284.792 109.667 li
286.542 108 li
284.792 109.667 li
282.375 108.333 li
283.708 91.25 mo
285.375 96.333 li
287.042 94.583 li
285.375 96.333 li
282.625 95.083 li
283.708 77.75 mo
285.792 83.083 li
287.458 81.167 li
285.792 83.083 li
282.875 81.75 li
283.708 64.25 mo
286.125 69.75 li
287.792 67.75 li
286.125 69.75 li
283.042 68.417 li
283.708 50.75 mo
286.458 56.417 li
288.125 54.333 li
286.458 56.417 li
283.208 55.083 li
283.708 37.25 mo
286.708 43.083 li
288.375 40.917 li
286.708 43.083 li
283.292 41.75 li
283.708 23.75 mo
287.042 29.75 li
288.625 27.417 li
287.042 29.75 li
283.458 28.417 li
302.458 280.333 mo
295.208 277.167 li
296.042 279.167 li
295.208 277.167 li
298.708 277.083 li
302.458 266.833 mo
295.125 264.167 li
296.208 266.083 li
295.125 264.167 li
298.458 263.917 li
302.458 253.333 mo
295.125 251.25 li
296.375 253 li
295.125 251.25 li
298.208 250.833 li
302.458 239.833 mo
295.042 238.5 li
296.708 240 li
295.042 238.5 li
297.875 237.833 li
302.458 226.333 mo
295.208 226 li
297.208 227.167 li
295.208 226 li
297.542 225 li
302.458 212.833 mo
295.625 213.667 li
298.042 214.417 li
295.625 213.667 li
297.292 212.417 li
302.458 199.333 mo
296.542 201.417 li
299.208 201.667 li
296.542 201.417 li
297.375 199.917 li
302.458 185.833 mo
297.875 189 li
300.625 188.667 li
297.875 189 li
297.875 187.417 li
302.458 172.333 mo
299.292 176.25 li
301.958 175.5 li
299.292 176.25 li
298.542 174.583 li
302.458 158.833 mo
300.458 163.25 li
302.958 162.25 li
300.458 163.25 li
299.125 161.667 li
302.458 145.25 mo
301.375 150.167 li
303.792 148.833 li
301.375 150.167 li
299.625 148.5 li
302.458 131.75 mo
302.125 136.917 li
304.458 135.417 li
302.125 136.917 li
300.042 135.333 li
302.458 118.25 mo
302.792 123.667 li
304.958 122 li
302.792 123.667 li
300.375 122.083 li
302.458 104.75 mo
303.292 110.333 li
305.458 108.583 li
303.292 110.333 li
300.625 108.833 li
302.458 91.25 mo
303.792 97 li
305.875 95.083 li
303.792 97 li
300.875 95.5 li
302.458 77.75 mo
304.125 83.667 li
306.208 81.667 li
304.125 83.667 li
301.042 82.167 li
302.458 64.25 mo
304.458 70.333 li
306.542 68.25 li
304.458 70.333 li
301.208 68.833 li
302.458 50.75 mo
304.792 57 li
306.792 54.75 li
304.792 57 li
301.375 55.5 li
302.458 37.25 mo
305.042 43.667 li
307.042 41.333 li
305.042 43.667 li
301.542 42.083 li
302.458 23.75 mo
305.375 30.25 li
307.292 27.833 li
305.375 30.25 li
301.625 28.75 li
321.208 280.333 mo
312.875 279.75 li
315.042 281.167 li
312.875 279.75 li
315.625 278.75 li
321.208 266.833 mo
313.042 267.083 li
315.625 268.167 li
313.042 267.083 li
315.375 265.833 li
321.208 253.333 mo
313.458 254.5 li
316.292 255.333 li
313.458 254.5 li
315.292 253.083 li
321.208 239.833 mo
314.208 242 li
317.208 242.333 li
314.208 242 li
315.375 240.333 li
321.208 226.333 mo
315.125 229.417 li
318.292 229.333 li
315.125 229.417 li
315.625 227.583 li
321.208 212.833 mo
316.208 216.583 li
319.375 216.167 li
316.208 216.583 li
316.125 214.75 li
321.208 199.333 mo
317.292 203.667 li
320.375 202.917 li
317.292 203.667 li
316.542 201.833 li
321.208 185.833 mo
318.208 190.667 li
321.208 189.583 li
318.208 190.667 li
317.042 188.75 li
321.208 172.333 mo
319.042 177.5 li
321.958 176.25 li
319.042 177.5 li
317.458 175.583 li
321.208 158.833 mo
319.792 164.25 li
322.542 162.833 li
319.792 164.25 li
317.875 162.417 li
321.208 145.25 mo
320.458 151 li
323.125 149.417 li
320.458 151 li
318.208 149.167 li
321.208 131.75 mo
320.958 137.667 li
323.542 136 li
320.958 137.667 li
318.458 135.917 li
321.208 118.25 mo
321.458 124.417 li
323.958 122.5 li
321.458 124.417 li
318.708 122.583 li
321.208 104.75 mo
321.875 111.083 li
324.375 109.083 li
321.875 111.083 li
318.958 109.25 li
321.208 91.25 mo
322.292 97.667 li
324.708 95.583 li
322.292 97.667 li
319.125 95.917 li
321.208 77.75 mo
322.625 84.333 li
325.042 82.167 li
322.625 84.333 li
319.375 82.583 li
321.208 64.25 mo
322.875 70.917 li
325.292 68.667 li
322.875 70.917 li
319.542 69.167 li
321.208 50.75 mo
323.208 57.583 li
325.542 55.25 li
323.208 57.583 li
319.625 55.833 li
321.208 37.25 mo
323.458 44.167 li
325.792 41.75 li
323.458 44.167 li
319.792 42.417 li
321.208 23.75 mo
323.708 30.833 li
326.042 28.333 li
323.708 30.833 li
319.875 29 li
339.958 280.333 mo
332.375 283.083 li
335.792 283.333 li
332.375 283.083 li
333.458 281.167 li
339.958 266.833 mo
333.125 270.25 li
336.625 270.25 li
333.125 270.25 li
333.708 268.25 li
339.958 253.333 mo
334.042 257.333 li
337.542 257 li
334.042 257.333 li
334.042 255.25 li
339.958 239.833 mo
334.875 244.333 li
338.375 243.75 li
334.875 244.333 li
334.458 242.25 li
339.958 226.333 mo
335.708 231.333 li
339.125 230.417 li
335.708 231.333 li
334.792 229.167 li
339.958 212.833 mo
336.458 218.167 li
339.792 217.083 li
336.458 218.167 li
335.208 216.083 li
339.958 199.333 mo
337.125 204.917 li
340.375 203.667 li
337.125 204.917 li
335.542 202.833 li
339.958 185.833 mo
337.792 191.667 li
340.958 190.25 li
337.792 191.667 li
335.875 189.583 li
339.958 172.333 mo
338.375 178.417 li
341.458 176.833 li
338.375 178.417 li
336.208 176.333 li
339.958 158.833 mo
338.875 165.083 li
341.875 163.333 li
338.875 165.083 li
336.458 163.083 li
339.958 145.25 mo
339.375 151.75 li
342.292 149.917 li
339.375 151.75 li
336.708 149.75 li
339.958 131.75 mo
339.792 138.417 li
342.708 136.5 li
339.792 138.417 li
336.958 136.417 li
339.958 118.25 mo
340.125 125.083 li
343.042 123 li
340.125 125.083 li
337.125 123.083 li
339.958 104.75 mo
340.458 111.667 li
343.292 109.5 li
340.458 111.667 li
337.375 109.667 li
339.958 91.25 mo
340.792 98.333 li
343.625 96.083 li
340.792 98.333 li
337.542 96.333 li
339.958 77.75 mo
341.125 84.917 li
343.875 82.583 li
341.125 84.917 li
337.708 82.917 li
339.958 64.25 mo
341.375 71.583 li
344.125 69.167 li
341.375 71.583 li
337.792 69.583 li
339.958 50.75 mo
341.625 58.167 li
344.375 55.667 li
341.625 58.167 li
337.958 56.167 li
339.958 37.25 mo
341.875 44.75 li
344.542 42.167 li
341.875 44.75 li
338.042 42.75 li
339.958 23.75 mo
342.125 31.333 li
344.792 28.75 li
342.125 31.333 li
338.208 29.417 li
358.708 280.333 mo
352.958 285.25 li
356.792 284.583 li
352.958 285.25 li
352.542 282.917 li
358.708 266.833 mo
353.625 272.167 li
357.458 271.25 li
353.625 272.167 li
352.875 269.833 li
358.708 253.333 mo
354.292 258.917 li
358.042 257.917 li
354.292 258.917 li
353.208 256.667 li
358.708 239.833 mo
354.958 245.75 li
358.625 244.5 li
354.958 245.75 li
353.542 243.417 li
358.708 226.333 mo
355.542 232.5 li
359.125 231.083 li
355.542 232.5 li
353.792 230.167 li
358.708 212.833 mo
356.042 219.167 li
359.542 217.667 li
356.042 219.167 li
354.125 216.917 li
358.708 199.333 mo
356.542 205.917 li
360.042 204.25 li
356.542 205.917 li
354.375 203.583 li
358.708 185.833 mo
357.042 192.583 li
360.375 190.75 li
357.042 192.583 li
354.625 190.25 li
358.708 172.333 mo
357.458 179.25 li
360.792 177.333 li
357.458 179.25 li
354.875 176.917 li
358.708 158.833 mo
357.792 165.833 li
361.125 163.833 li
357.792 165.833 li
355.042 163.583 li
358.708 145.25 mo
358.208 152.5 li
361.458 150.417 li
358.208 152.5 li
355.208 150.25 li
358.708 131.75 mo
358.542 139.083 li
361.708 136.917 li
358.542 139.083 li
355.458 136.917 li
358.708 118.25 mo
358.875 125.75 li
362.042 123.5 li
358.875 125.75 li
355.625 123.5 li
358.708 104.75 mo
359.125 112.333 li
362.292 110 li
359.125 112.333 li
355.792 110.167 li
358.708 91.25 mo
359.458 98.917 li
362.542 96.5 li
359.458 98.917 li
355.875 96.75 li
358.708 77.75 mo
359.708 85.5 li
362.708 83.083 li
359.708 85.5 li
356.042 83.333 li
358.708 64.25 mo
359.958 72.167 li
362.958 69.583 li
359.958 72.167 li
356.208 69.917 li
358.708 50.75 mo
360.208 58.75 li
363.208 56.083 li
360.208 58.75 li
356.292 56.5 li
358.708 37.25 mo
360.375 45.333 li
363.375 42.667 li
360.375 45.333 li
356.375 43.167 li
358.708 23.75 mo
360.625 31.917 li
363.542 29.167 li
360.625 31.917 li
356.542 29.75 li
377.458 280.333 mo
373.042 286.583 li
377.042 285.417 li
373.042 286.583 li
371.625 284.083 li
377.458 266.833 mo
373.542 273.333 li
377.458 271.917 li
373.542 273.333 li
371.958 270.833 li
377.458 253.333 mo
374.042 260 li
377.958 258.5 li
374.042 260 li
372.208 257.5 li
377.458 239.833 mo
374.458 246.75 li
378.292 245.083 li
374.458 246.75 li
372.375 244.25 li
377.458 226.333 mo
374.958 233.417 li
378.708 231.667 li
374.958 233.417 li
372.625 230.917 li
377.458 212.833 mo
375.292 220 li
379.042 218.167 li
375.292 220 li
372.875 217.583 li
377.458 199.333 mo
375.708 206.667 li
379.375 204.75 li
375.708 206.667 li
373.042 204.25 li
377.458 185.833 mo
376.042 193.333 li
379.708 191.25 li
376.042 193.333 li
373.208 190.833 li
377.458 172.333 mo
376.375 179.917 li
379.958 177.833 li
376.375 179.917 li
373.458 177.5 li
377.458 158.833 mo
376.708 166.583 li
380.292 164.333 li
376.708 166.583 li
373.625 164.083 li
377.458 145.25 mo
377.042 153.167 li
380.542 150.833 li
377.042 153.167 li
373.792 150.75 li
377.458 131.75 mo
377.292 139.75 li
380.792 137.417 li
377.292 139.75 li
373.875 137.333 li
377.458 118.25 mo
377.542 126.333 li
381.042 123.917 li
377.542 126.333 li
374.042 123.917 li
377.458 104.75 mo
377.792 112.917 li
381.208 110.417 li
377.792 112.917 li
374.208 110.583 li
377.458 91.25 mo
378.042 99.5 li
381.458 96.917 li
378.042 99.5 li
374.292 97.167 li
377.458 77.75 mo
378.292 86.083 li
381.625 83.5 li
378.292 86.083 li
374.458 83.75 li
377.458 64.25 mo
378.542 72.667 li
381.875 70 li
378.542 72.667 li
374.542 70.333 li
377.458 50.75 mo
378.708 59.25 li
382.042 56.5 li
378.708 59.25 li
374.708 56.917 li
377.458 37.25 mo
378.958 45.833 li
382.208 43.083 li
378.958 45.833 li
374.792 43.5 li
377.458 23.75 mo
379.125 32.417 li
382.375 29.583 li
379.125 32.417 li
374.875 30.083 li
396.208 280.333 mo
392.625 287.583 li
396.792 285.917 li
392.625 287.583 li
390.625 284.917 li
396.208 266.833 mo
393.042 274.25 li
397.208 272.5 li
393.042 274.25 li
390.792 271.583 li
396.208 253.333 mo
393.375 260.917 li
397.458 259.083 li
393.375 260.917 li
390.958 258.25 li
396.208 239.833 mo
393.792 247.583 li
397.792 245.583 li
393.792 247.583 li
391.208 244.917 li
396.208 226.333 mo
394.125 234.167 li
398.125 232.083 li
394.125 234.167 li
391.375 231.5 li
396.208 212.833 mo
394.458 220.75 li
398.375 218.667 li
394.458 220.75 li
391.542 218.167 li
396.208 199.333 mo
394.708 207.417 li
398.625 205.167 li
394.708 207.417 li
391.708 204.75 li
396.208 185.833 mo
395.042 194 li
398.875 191.75 li
395.042 194 li
391.875 191.417 li
396.208 172.333 mo
395.292 180.583 li
399.125 178.25 li
395.292 180.583 li
391.958 178 li
396.208 158.833 mo
395.542 167.167 li
399.375 164.75 li
395.542 167.167 li
392.125 164.583 li
396.208 145.25 mo
395.792 153.75 li
399.625 151.25 li
395.792 153.75 li
392.292 151.167 li
396.208 131.75 mo
396.042 140.333 li
399.792 137.833 li
396.042 140.333 li
392.375 137.75 li
396.208 118.25 mo
396.292 126.917 li
400.042 124.333 li
396.292 126.917 li
392.542 124.333 li
396.208 104.75 mo
396.542 113.5 li
400.208 110.833 li
396.542 113.5 li
392.625 110.917 li
396.208 91.25 mo
396.708 100.083 li
400.375 97.333 li
396.708 100.083 li
392.792 97.5 li
396.208 77.75 mo
396.958 86.667 li
400.542 83.917 li
396.958 86.667 li
392.875 84.083 li
396.208 64.25 mo
397.125 73.25 li
400.708 70.417 li
397.125 73.25 li
392.958 70.667 li
396.208 50.75 mo
397.375 59.833 li
400.875 56.917 li
397.375 59.833 li
393.042 57.25 li
396.208 37.25 mo
397.542 46.417 li
401.042 43.417 li
397.542 46.417 li
393.208 43.833 li
396.208 23.75 mo
397.708 33 li
401.208 30 li
397.708 33 li
393.292 30.417 li
414.958 280.333 mo
411.958 288.417 li
416.375 286.417 li
411.958 288.417 li
409.375 285.583 li
414.958 266.833 mo
412.292 275.083 li
416.625 273 li
412.292 275.083 li
409.542 272.25 li
414.958 253.333 mo
412.625 261.667 li
416.875 259.5 li
412.625 261.667 li
409.708 258.833 li
414.958 239.833 mo
412.875 248.25 li
417.125 246.083 li
412.875 248.25 li
409.875 245.5 li
414.958 226.333 mo
413.125 234.917 li
417.375 232.583 li
413.125 234.917 li
410.042 232.083 li
414.958 212.833 mo
413.458 221.5 li
417.625 219.083 li
413.458 221.5 li
410.125 218.667 li
414.958 199.333 mo
413.708 208.083 li
417.792 205.667 li
413.708 208.083 li
410.292 205.25 li
414.958 185.833 mo
413.958 194.667 li
418.042 192.167 li
413.958 194.667 li
410.458 191.833 li
414.958 172.333 mo
414.208 181.25 li
418.208 178.667 li
414.208 181.25 li
410.542 178.417 li
414.958 158.833 mo
414.375 167.833 li
418.458 165.167 li
414.375 167.833 li
410.708 165 li
414.958 145.25 mo
414.625 154.417 li
418.625 151.667 li
414.625 154.417 li
410.792 151.583 li
414.958 131.75 mo
414.792 141 li
418.792 138.25 li
414.792 141 li
410.875 138.167 li
414.958 118.25 mo
415.042 127.5 li
418.958 124.75 li
415.042 127.5 li
411.042 124.75 li
414.958 104.75 mo
415.208 114.083 li
419.125 111.25 li
415.208 114.083 li
411.125 111.333 li
414.958 91.25 mo
415.458 100.667 li
419.292 97.75 li
415.458 100.667 li
411.208 97.917 li
414.958 77.75 mo
415.625 87.25 li
419.458 84.333 li
415.625 87.25 li
411.292 84.5 li
414.958 64.25 mo
415.792 73.833 li
419.625 70.833 li
415.792 73.833 li
411.375 71.083 li
414.958 50.75 mo
415.958 60.333 li
419.792 57.333 li
415.958 60.333 li
411.542 57.667 li
414.958 37.25 mo
416.125 46.917 li
419.958 43.833 li
416.125 46.917 li
411.625 44.167 li
414.958 23.75 mo
416.292 33.5 li
420.125 30.333 li
416.292 33.5 li
411.708 30.75 li
@
388.625 10.25 mo
396.725 50.939 400.876 93.915 400.125 135.417 cv
399.113 174.478 394.328 220.725 375.792 255.833 cv
363.694 278.452 344.805 294.516 318.208 289.25 cv
277.534 281.311 236.672 229.147 211.958 198.083 cv
204.93 189.24 198.041 180.277 190.625 171.75 cv
185.745 166.362 180.878 160.737 174.792 156.667 cv
168.434 152.466 161.868 151.31 154.792 154.5 cv
143.849 159.056 132.664 169.896 124.375 178.083 cv
91.7036 211.522 65.0093 250.31 40.0415 289.667 cv
223.292 294 mo
204.475 271.621 186.005 247.226 164.625 227.667 cv
147.492 212.994 131.333 205.048 110.042 216.667 cv
98.5317 223.103 89.2993 232.259 80.3745 241.833 cv
65.8647 257.927 52.7227 276 40.7085 294 cv
0 0 1 rgb
@
grestore % PSGState
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
[
[/CSA [/0 /1 ]]
] del_res
/JNFKMP+Helvetica*1 ufnt
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 12.0.1
%%For: (Tillhor) (S3)
%%Title: (Phase_portrait_with_regionmark.eps)
%%CreationDate: 9/8/2009 3:12 PM
%AI9_DataStream
%Gb!<tCKDIcZ9S89f#i2UmNd<s8UUc*i%'A?KEQ>1)V]dpYoVTCm$nmlci0l=P#SQ$%%09U=aR?#:'Ral-$;eZ?WF)$^3d=Q^)6MI
%UQbQL?gAGm<l1LBnYdYkoYqtsmlhc)ma""Y.aM4ml,"p.@nE02s!C"g*-X']qkNudFPQ90ArZ>"4IrTU)S\>.b4Eo8I+#!AkRWI/
%^FJnbVgCo![)\rPUj^r=rn3nS\fLY6i*nGZ%f3m)d)[8h0;c&Nou][GA(I8RC;'.7s4adXB7J";eTRYoX7Aj_Q'XY&q6.p8AD3HA
%r^+2h_TM)lS*c`h=-@[1U_DkfG)!nmfmMMAO/L(g'#I4Q54;9;[ae9Mmd*nFNm#IWg#Lb"#KB@+81b@omot,mm'k$ao?Ou]<HY"^
%Dt%?cha!24r/Kf"U[IWGfADq4e*j7pS>dmX2tc4(5G-+WUi;T(?>nF7ncd(sMT'lf;#abroX]N-;"$OaO1m^V8gu+Ck!=LFd17KU
%a[Z8J$"V]T+*T>lF5<7AUQU,P+&qn0^77I19\##36VRG3_#NY+EY8W6s&L$8T-Glc"b6-$W._aQrV\(M_)4Lu<5M0ik#d0L)M!ts
%eO^>2@K1^1m*,?A_/PN;A`\HY^[?#-.YgKUXg0pgZ7J["X(bZF@P0-M(fbi"nOf1k"X]B8laTC7s)ZQeCV@%2d#pQIBt&*'CX`*q
%i;_lbL.NT@WkdWG(W67Ec"I*8Lo[gT=+*:#onRieZ$LcLJPi:r;Z@r[@:so7T>OhO?GMr0=44lHHZ=&>fD3shc4%VWgWN0<F?"`M
%]"?+ZX;]-a<$ENcJ6Wpe_FbG3$-0'>Y`ct96k*L2!\=b$V/l:kUjP0CS.%mQX"5!NeL[fm,RSP>DGLL#2eNe18bG=5?)f@Ls31C*
%G$,/;0$06$#KFM9Si]\5:jmcmmC,Qu`qUOn"4kTM\t&O?WW%Y4'7B(oW+V:4`T5#\T5OQMZF-;@j*?,$3=brWQ.Mhoq6M`NOfl)E
%VW/!s!MML<bkc+qEi]Hi?.qBgAQ#-1-F88>I]_3^3U'?05P"VRG;,;Gj`oGXf@m#bSY(oqAt;e;m@`4%N^mk4(PAF@4mX9:f3Ym8
%/;uE(.$4AVhbpt^F5*K72*^`.UC13c?gEc!S_<72s'5M84rF"iCJk?.qWFEKeF[N4Y>JSNggBB,k<k(AK8Q09CEIkTr`$W%XKjaR
%80&rlHFVP>QqmORmP"A\?9=U9chaE3Nmq0OdB"5^[I/;1$[GKoa8PVGBJ>V"'>>gT0>V*W)UI#1In`]8UU@)L:U4GJmC^o%DFq+U
%6!BaKI4]5@bgtp+NFs&*BS5hsD14P5p[,.ZpL;ud426lW7]`Sp?<<0%i[0rQ?oXCdZo/u9)R;`nSQY\rW-X]*nF5U0B.E5_T;S7=
%Z#0XOB,-a&[@3NpP#Y5c=<jSDe+0Wo\$*UUXOUKi%ICr893#>7WQLAsMc=WJH97R17lR\?BQbq$COWkg68^1E][R[&l3]19KpTAH
%05\CDWQtg5iNKYUZQ[PL2s,hNkfRg7jYsX!#Q=/]F?GhpV(Zh(,cB@4XeQj'R.oj,g)]!ka"lm-EHM%m>pGBDY27dcql[58e[P2U
%RVJLp#,I*,V<LWmN-'\^9g1I`)NtM<,dI#gK0KT;TS7BZX'Y"U/opp$Y]YEZa)`Pc?`*V<+,;GM'VjK&LGK5Al]i9,+sB9$7FN/t
%a']CY=2%gaM-<ZHem/$>UX0AJnDats8a7tHVfFc1kTBemoMHR.7_ZuFpSFhOCA#6,W+YA(rS`HX\31j>9QinGiu<J!.1;uXhjL*/
%b>2l1fn0Wtl(8\r7@*?Nr\T>Zc=$5$$C6HG3=fZh?69(/GGV";KE^eIK8[RYIiVSeg'2madbUF"bYB[Dj71K>'aaAlmBK&P?0Au"
%&PHB[J:..LbIl5bBVm?M6+;f&a`H4`-$?E?X9:qQH<H1%8%,[3NW5#^5g[Q(;,:4i'AlB!Hp.R,Y&\L8R6WK'[L)&<qCdhMkt$o@
%<Mcg[oW6&r^+6Z=;Kl4!Ff(@<$0Tq9d<IX<SNE7$')VEG=@qOi9"LdHb5WO#J$67PLRh:T>#>fHDj4kfmmq<YBe*3GfLDMlWFfC@
%]i&L;d`08@?<MU%s3%EoK>0J=mV.AJp>tC.B1m.H9\"%tn;m0=hZ)$=GNI^HAEdIL]RF2_oHgI.DF"$pfD9bh3JTh`ca/CV1&Y23
%rkN.krC^4o-=J6\pRiEPBdfAF,D]6/<!Ot4D,4n3cCbt>jgf+gOOh0]2H##ShI'B69ALg>]P$1!R>9/Fgqu'0rb.un_>)TE]!dF6
%,pF+.`(^"WdD%>EaTgk*(g8(Qj\gR'HW';0HXd`2hV7SZDLAr+F'VYcmb3Hc(AZ#CC#L3[I$r=Uo'uT=b::ue^`B$H)F>i^mFc1N
%f1>k?XM]?+NTE3-HdOkB='"DBK7S.$qt@R`IS`%UJ*:R4O0p$CTR>X\]X4io\FE(#9e&p5_f,Je7QnIjh$"_WJ2((Lr*/3.rAS,N
%^O[#t*!db:X2ehe,990+OJ24CUYk:E+%fETGlN793^:Wkhu+R@FE!p`\4J>pL27W==dBHqHm4]809sXj2)",Br\di/>kdQ%"K\,C
%DcuEu3T_YuEL8W*JrrNg-90QBb`s5Q1BfIriTHjAj40RsdKMpJD+?cpWpMK@Z*YuO;VCAp:+eRT&mrZmJDh6A+9G^-Fh]_c3a(S+
%`I)\\YIs:R2a@(%*AMYE.BLI^>c$V3BhDZ.-&GmQK$(>.#"_a-WiE3#.@go.DiQm,;!@UI1R5AZ1scSP-IQVo:Sja=rj+h[JD=a<
%eE@AIP=g$-HJi-F#ZcmSU^HfGX)t61UN'r#PGE47,=174AsJ4[oqn#-5e>qqnof_,#a)/uAG@DibBf@<eaMsC17nC1Fej0BQ^r>4
%B4g461Bs%<YD7fNd*52M@Qq4&@\gR,l+-H00@%\lJ=8TfK54gXA(jt6q]PHT"a"L9W0r)E6ZUiZf=]Ps%Ha4V_/M+.L"()VM<Ii/
%bG@5dpT@/81@=gqi$0<6oQ"D9pg-Naq-Ma2UZ"ZA\r6qI-Zi8<Nb4K8Nl7J^#<b)Nlt?P_nb12:%-5cXk'b@WY;VLY;kK&hh6X@k
%cR7H90$r$(,3`&hD(\?JMWJA>-!ZDTqD15-jF$<SVnIP_A5u/c*maH(F)",:]=!,2>m(EoahED*UD8]j8ocD>nVWk+HdE`$Q(aM4
%JlgIMNEr;_^5o;!CNM9q*miD0'\Qni\kZ<WRM'aT-re@n!nr[3-oR87R@nqNa%'b%VfL]Bgf8u<[EY/1"k1<8`OnE>S"-"@<?WDH
%)]p/'O2geeptVA'Pe;?LQ(@Bes*o!)VCD^c<7m]*6+-9dIjE8I\I*YJcV"N3?LE;l;#-:g<TZ/!R?!=5_nIKsO6CuH1DJr0VS25q
%g)5mKSh;]p7)p+=me(ZSXno4mFl]oF)08A(T(FY<U6o6.UH;d)$V:A4l,0r"OpC9XQ6rqQG<D=T7uIL'M2hcojieo#Vbp[C$edW_
%c)\1/URAm&I%&oR%!-CPglomgh^_CaCXCP@=t12YmS:fdX(W3f"[kSp7oF<to+%-S"k?PsEs?gN!i#+i=.N".[\-O0;C'YkgE"NS
%]r!-F%(j7iM%6K(e!''hf-*1\eD,"hp$r9C?*V,TPKC235^?e!JEj=(Df3.n<!t?^dQgCX9LDiTdk!)A8!<MO:SppP7Bl5aXrtD!
%PRb7"l)I^77;iUW;&aE5q.Y>)4jrcoYHrqg<a%3/3%K=bXXqkuR*?C'Xsj1BNa*@5.ob,F,Va>B%?nbW&4rk3'4!qN;HRMQROBDO
%(._*UIA5WsMYEE9dd$N3M':p.Sp#FaTs^9JOF\Y+=fA5`GFuctc`U(qZg+K=,!DVa(C=<HhT>D7ln"K=+TL6^a_MI*55Opeopi&?
%X,-AK02_"Bl5t/G$Y9j%;\EZPMKU27otfkETQO)mdA=PDooHrYUMAa#V$,:G)pS][iF8(O?VE%]@R"/Pg\go\>aro*2sa5@U%XVq
%]FHHapDRj/_nP5W-)':"B%m=9A3:f90g7iL"[4pe:]J`X]ZF`<j!hJG<t.1*Qjm^K5s!m<`(&?Q`q)XJ%ZjKVm*)iYE#m[&'dIT&
%O'iLbWoe[,g#-E%$/cG04dAZXemGqQ2$@9M/r-GU:TADZ)5[ld,;4!-7B*6V`Uq[DA!"R<R,"Y^Fp6p,oSt3`km6=dANZFmE>;7r
%MpN.$OImc1S>E"^UMEC/S-?hb<Vk0A/pt%1#J,M0UI\Y)eB8dALOJ9uOpKTmND2^c]k42ni94Lrl+Ln"6[PC"<=<=eh3R<,&,`:4
%?5lFJB7l%Go:s9ZQ!/<NC.K<:V#2g@Et94noGqZ,<Q>u!A8pq<Nk*^oNOe0r(C.KY:Q_d\1"HQK=C:6#XOdbA!fKM;7f"#Qe8a<R
%aMgS#IgJR;DnUe_E6XJY<Z-m&ppr3tWTZ1sc?8/%AMXVq\_h4Q1XT<f/e&t,g!N9%U'%`S^3_S$<r"fbm?4Vkk_e4nOH4N&42;3Q
%g`I%3eibR&b&G.EWF%<];De1r)rjfa.MOg!%]>l>Uq^$p);8\P-3`)m7.=DDg?D1;%#tQ#[6dH3^EKsW`.!^>e-95HR2.Tnbsh<0
%'p\7e>87\2SPcRH2:>hm4I),>!r41k-*8:2<+_LI>l!]m5H;pgJ&8717MV<&%ob\JK:s*Hc3tb'nk$0)6fQY=S!d_:s./D#3QAhR
%(R9j,,aInudaq,]F[IrJl,\Q>)!Q>]Z><PkZ=1pa,TVZ_HjktFrQ7AWmnRHHdIhrS5e[>U/%U&1Cj+2hKb!R1R`\BGb]M%\Shq-6
%A?X%oY![hEj^N<9>N"%)egm.Wh<A<6h9o13enC.tM^'Zj3$7]03k9JEj`F8"3uoDcjuTJhEP8Ds+0Jg`k,\0U.PB?b/.Hn(cE:_X
%C5cJCU\#2nrq`+jQW2S3<!T>0:+b8Y#Z2NfLiN!r`jchCj(_o.6aH*eGed91]B=/C>4m&cK@/A[7<,gs&<NZ8SWE2F6+uH_pJR'f
%^7TFUg=,S;D*%]44?^lIcL4ar>T>K/ZlXY%hlB?*o!7b<WI$TFS3QI9cee>uLlsiZU3ls>"*r>HW?H-=*>1&/5cS4p^,TM1BVbk6
%S[]0/H-%R9&U$HqfVBpX3a=rKHor<k:Sm.L%2YI[2Ad=e$ql5>[!#C-`2j%j:E;U!*K=pcXur4WCtc-BDNt,I"4D<%@I?c=DbiI0
%i*7)OX'F-iO:qr6]'.KtK^2^8rSs50JuuLI[,jU8o#e]ne9oe^Mc1^7]=pDT*rHrYokRl<U8m51(9(C4[q+dS,s>Q?C_DieooJ#^
%h0$^H/;VTaIs?9ZIPg<uL.57/m?ggX+n7a_;mXQ?O]JV_T8.MUDkjT`T4uMe=@^Zh!R=fu'G)N2lT>4*c_W&n"T6m:"66Q8%N7Dj
%C"/A"CJSMMh@6*i]_?,coA-2=)kH^R]Ah\jeb[j=qttR7A9;n%I</uaIUga(cL/VhT!mY5lW\;9+$U:.XRCSOs*SU.d7r=Hr]Im;
%_XM^[baLbb-S*$(Xc9O7LKg5uPM+OR)./TPCi/OpS/SE`H2ZggX1bX[Y^b":4F5e"<ibsj$>o2'50*qlB)D"Bno9$5r:-U)IU$0X
%SWEMW[@MsGl13m0p-lS2hK`3&0tdN]2UabuG)o8+h+=p4jR'!DT504AlJ'KdV0)$1[PlIc?aeNueaqnbb2&!LdWY(]2P]?`r\!$;
%k4+d^8U\*+I(t,85Fj`.PE.7BOmi%5?+0KKC\,[HGFFZ\oW7TUjQfqIFmisaVmg`R^7,&2;`e*p4jomGhs!GlFnT<Z\_HC=YEg*)
%iO=fkg0J]:\c-("qsmeJrgS)+J+<$ugYLV^)r5Dp%/q.r[uU2XFjhmDlQjrqSaYlsYIhLEnEuM;X4-1V(U^r/HU$Hm*c,][T#-WC
%GiS1XXkK_#s*XXio8U0=r:?[LP,uog7;^c7@EW<Lbd-RnG@tijjHBE=jIHR&l\!2\7h.;$rb-"gV-b;kqrder54%+]C@#cnIb.cF
%,"S>CmX0n15>E-WYKNDRH_8mbdHrTEn)Mf$q+?_.LUU\o5/m!M=!J:,j8.G]GSMUigYQ8P^>+1o>jH4_CYrCr3/(sRGjn^Q;'`H8
%i98`eW.$9^DK"NAS*sP,1jrl1oj)Y!+8Ckd_=*$<a,aFT]_UXL&Me\,BQKsCj2G(WR^U8"hog=VRZUSB?/(&dXp](1d;,E?LT2o:
%=`8afig.=8P;)tQs6/#DRm34.a(s"M[Q9uVGO"_GRoc(TS)5:=%Ss_.gA[Z2o@b?(0El45QOgQ:V;B8DqsR<5XH`A<c-=hCB9$1W
%XA5CV62N?R*Zqb88u.VgkJ?`LgDfVR-imu69^<X%ITm??n$]^&e'g87qX\o,e0q0@?lI3#I(6Ie+(nr/C$&cnMVa.]%kb)Lc"npq
%\l`]+LTDQ`7dKW;m9lS)4cYTC>8r@h>IDB)q*e/LhImPLS'c^M]a88*T[S?j#;ojf(U(/oHg0DJ6/seNrNUJZCd)\/Vpgp(^].ub
%p-_QlMIUS:p2-.q3OcQq]a[X.=gbg3,O(j:d%d$Nr&fI0Hhk)K]\PR(9`t+UW7PqZc9E^O=u$TBojRd^SRW_epE"aa5<Z[XaQnLq
%7eWVWZFPC,[kHK^[0auF"NTis`l7rRFC"^ob'\PVlR9rB2o6B&9K%'+j5\-e2MdX`>lD%U+5G^ulJ?<O^OGWVY3FOK@$3Z[I^Jul
%f<fkp=m@geTAJCN\39lC40KZPhefM*_HSV:i;!<#\9@XpI'WG=E2V0&V6Ab!B%ES-F2A%!+Ylmc]&!AZi8uIh&&&:NXu'mXf%aO+
%n79.sI(_P@"ck;L8(Te*qfJaE^[gHLmNSTDfo4A/P[JY/HunECi-k"^nD4L<,8M8)[-j"K5M<;%?Z*Q*s3q%m_gBYgRckD-YYS[7
%+@5>#\N>67]i]^E9Dksh/86.I:?1L)KD,W*GIMe6T`'./^sfOkZ]g;jXo%?bY4URH8b2G)S3p)n;g=f)g?VtCUqN#3%pH"aa'l=R
%r8*T:=Ng#Ge(2e)op8u3kOR2ir27qoIpeDHCZ_f'Si.WWfiG8W%I*Pr8t+8\Cc#s&p"-pXA?/qG[f*,OL4<OI5>=M.A@e1P/(^)]
%,)fJWbp!\MI95H+dr\+SWM-h01NiSlO);?99UY%oYg)O$8?$c8X.)^B-o>>bG`o,A"U'mZm#g=*Zc$'KOKW[kcm!mH\^\^Td*Z#R
%^=OG8D^;P)2]1:M?4C-4fSV.3&cH&(BAL:@gZnu#@gCM1RqiFjWiQ/7k?B5sFYi..j6F1[Q[:AE?OASj2fkt2[*7hrM3,21\4j($
%jk4=2$!hdS;b@"#H$J.ZHW0f]^/`-j$cg7YUg4sD/\Zu,ALf0910X<Hm?(ZnH>^15'[V62/adCL)C>'sfZ_(3A4N7k3\WGk`ai%I
%]1/\`_m]QmrcMUU7!8N`[SNKbc7UpbcM)KgDGB;<?e5c?mbZ+Ha&nf+Z_dHWGmb)pJp"H4Fum>V#J7+1%FG"`S)$Qo>[$4]1Ps)'
%Lj1!mPMX?dH@0'<E"?7e9BC-e@[U[JV0`=,@&F[']2@(8HM!>MSop).)CYml]YtVBiu^4$Y8#dKH@(,JPYJJCh##N;7N]1m9X=2.
%Y?d'pf%r6U/rac#Sp`R8jdpWZa4"*c&%4AtP?Z;fjkEYX.?k;jfNk(g.pYXpS,1N(Zi@8;Q[;eCJLjHDjmZo"J*4Z2k)jab9,M=a
%=]s4Z);R7@\>%[?F^84Bo1AW*nrpPRT>o)L49(>/X/o('FFi1tZq4R^k,j]X]-mORk*)[N/AU&tr4^j%r_:RA2.MVi4&OPOTrlM0
%IVs<ug[Dr94_qNoF;>DHN!F0H01\iVpSD!Opn9R7I)eUZP0G,Y]suqUCjiHiH`"C,!P>N/"g$Y]Uu]derj1bWX4b>C@/j.G(D"0g
%i3tm%p*m3,:qlf-Si"`O2g<S%>`nb'Q7!X/gIoT5WjQ7+n0<F%kNf"M"KA>g-`[cLkZRIKr#F=[]mG6!/u)u8LZ$Z9*J_Tt#O.*;
%%GJ4%hlcS&3$LtjmiJUBFc`0eT/Dk=H/;bCJ,f4%CY&5DS<\12gmF:$m0EO+%CM.#1gk`uY:b*JS\*j.%<SArYi/dTWRXYR?\@1@
%c;X^jj5E0a%G#mh_a(4s[]>YFU@iYrCi)<3E(g$iV`3uWJ?s_:!I7g0f^A^"1[WSSDnW]Ll%QE`BC40CV$l.H%bSI)rP6^(j[leD
%V+-dF%"1Wk,C$Na>r=EagB`hG`XYHU/jA'm]q!TEf#*Dl^fK=9m,ItAPtL\tf35WQCt1^/1sYFImn%QpYTN3q]sT!e?<uDI>!G_\
%dh#;*C&OZA>/?YF*G;5kOPq;-DDt<ThcsN;]`%5%Nd:;#rTs@NS`Roha)3?/_]X?/TCGE1h#l>h%?g3ms5p?uojPV\)M=NOmRm^f
%J(4tqSCUm"Z_.!ALh&`I=hFY*\95PlHaP*krUqc/#6d5mh*YKHI^^rCUn_bnq<Q?ai%/or_;`,,0gke)P]47s14BS.KInZ[Z')G%
%H[L43AP@H&/j;+%UB,2CnSIEqgj_A4939nPIF'tPe;u1EIf@%%GJ<O3nab]N?QPZ@$2EPQk>E%bgt_c%Ut[h<H2jV)*_fD0m-37>
%Qjec.c@9LK=)UQ3UlT\sZXDtFp8/"pf(s:IW2eD4j7l%cgH&SgqWN"Ao)W>"o^i%8@H6H8Zhh8B]!_OsCu?G[bs!/$^%_0lHZ5N?
%[8t;n05B1on=a?G@7,#(QX5[^<A<Opl?<P>7rK[E/pDQ#V"M!_,mWFVo@^J?7cXAK4d7ior3El^?%+*C%N3t*f`"M'jKuTMc*jHQ
%l+tC#A*[e[J4oCmIm4Fo?^tp@>"=ABIcenE=@^pPn(g!;J%L-tFo0pBD%8l"U[miFgc^j2R,*@Mku5^-("J)]X(BZ)cK`gP'Q5U@
%9inZZg8g"Rj8/%eJ)[lIcI/18g(-C6c_XLXHM523ntThNHHk;l[c3aADn*.W1TarppJ*@(bqSnYror-Ns6FmHUJIK(1#0JlQY5dQ
%f$?D3OIAbrDQVcs`r=.a3g]u3o^VctmFeg=WISM,rjfJR$REWB]BsNLE`)7SgATgl5.MIeTC(DraS,*%BQ).=pO8LN/Lm7L>\X[b
%h2-,7Y.%phlB;s4K&@Ebg?I2Cj#;)tjp<maOVNi"p6XjV=tP'sALDE1iom:mHDgGDc/7#WD7mJR$tL@!CoOs,gP=:R\@R*4qt%;N
%B_tN%]t)CR*%SDF52k:tp9q9UcaBHOcHYO[f8!QpWEG70>Ea6thSWOfH)%XPrpJqlGpc"pG$#\"-6A5nIb(8!1"aj\dF3k8gRITu
%N(fY[O(*ZfJ_lcclK@?c<-bcJ5"jni[q$l_-X6-9%R^QfYO7G2e^;O527"?\g>Ud6B3Ujd-SK4Qet-`eNp]E(P.['in6cIY=L4G&
%V"sY+]2AHG,6(gE#4](_rc;E,0jE<LY9#lmMeD)"?QPQJX5-UF>Wt#06Sk46k_0`Fj&7o+;F<Z1Cn*udrT;i.ai!t9q>#OrJ+k@U
%JFRs:>(.;1;p/JGZT@n_s17msc@#%@##jI-ZgS^`rpIf[jIJR_Mn@g:fSS@;iqJ]6XW>VM%@Y?3Sds4_](&O4kA9e*m[oe=)OP5h
%BKK,j4M99`e?ap<_nD-9?Z"N^I/gQA8%#sOd6+u<q1J<6QFa29r*ZiH4Pi6qQG>ui%IZ3!T>,Y)($j=K3OM(gK@"WhBjHF2[HZ4i
%s5I/SI![KJcM-4c]8m)5I=6D5V0RGJW]IkuPO_+%TFr'lGB*XV3YG1l)ZN9Iqju>ENk:MA7J(Fu%a4(D1dYE%[3U*IP$aG<ZumYo
%3jj,I0XuO3'D%"(g?[/XB'\[UgS<2/,ZV@=]p..^]P;THD5I5@$YCn2j,^AcG,0D)s*Ybm`4+IHn%g,'R_(M>K?K^?5$kn7SB'YK
%@B1/,3SnO)4kn8<CUIQlip=/!/6W$3DZ@!!(d*,-WXTWQl*Yj/bS!.)B#SSo\[)B=d9:tNlu.?d"j1HWe]/KS=K4T`0UUD9V8_rl
%%XK&'WVNfBE&9T+HV435s%TX#$#;Z^m>[B82Z*U'6#0A5fd(KkH\W/Z^XN$;koD8T;1qbEqpjlan6edkNGkB;cYoXELqg=iFRmm5
%:ZG)U1[i7o-eWb;EaP7EDg5.N8(6VGq-_cko]t\GMo3('rV>:9Ei=Ju^'R*H`q/'DmDb((>BZtHO_3X]DX2!6FS-!P_gCjdaAoop
%X+%d1YC,/nf(YfLGV=hqOBgYYrEch2[[0XK;FpDZqI'9tZM7B\4M:R676(bX2.!XrSY.Y+\92/HgGoO"GR0&brE?e<e(ECLnn+i%
%UHgqHH@T-*oCnm3X_*gIj5iGUFJu:dhb^^YcQ:@XXF?USheaH1lGN45RQ$%_b7#Th2Z*67+4X]Ss3b)1PHe/7[F[@88i@XeXSWdB
%UZ:/hbNfBTD];!V\cmig2JAG[g;oU1p7$a$catdBIg"LnA8GRD(jb&Q073NaPr-2BYLHW42V.JOhiR5D9"lD(CdFN+-VndQ`N.VZ
%V2>+^`N6GeK:L&g\NLr*leu!M\'aX!CL+E\e^0ARV`.b@9Ao<A<6i=:#<L.*Zd(qAf0.X[9?bAqc'8gshq!R`lu;j>\&nBW3]!5K
%.PV=8>&Rin7_r:+P@`LQ=W,_=S;lr%1XDN%mgljI+iXD@al3!FdcS]kk<]%@kJN9[pXOmd\[\L\H+MRE?IWA$o7mtWC9tYKpoOu7
%jedP2hr*HFV9[N@(QIVKY:"Oi,rS*E--oI@b3$%d00b_jFQsI+%_ai#pn;&%hk'l7*>JjW]iR5a4fcJ`H.4qgNMk(6<aqAug$H,4
%?bErtrR"fp`cYc&epHN9*7it(:SRVbG..'RD_&A@rm!(SHT/-i^)\>[q!mWMX8AUjBqt9;r1ggRqJj"#8mafZ)S-*'J8Xc9Z_ni*
%B.DF<RP\mT0"0Wf`jOjZ-f2TY^GW?9lY_#nB,!GiNYqJc:I_H-\Fi)?h]CB56*t@</G^s/Xdhpn2gZr70u<',SH<]f8K7?iRkJ\=
%43,D?!o=JX8c!1Li8JsAdH\cSbpW1Bp4MVTFr>ohH1L0u"JU6C3C-\1_",^'ia^VL^Ye<_g`!9g+5K,i,$:`a[t_;:8tDm9itKq2
%.t#5l]l?0i"rCA;@uV">P'pKRier5AJ8Z?uUgj.&-\6;e0u#;K\94_Boo,G6("^1WClc<DDgj_B'%l's='RX&fnXY5CbIBn[s8t.
%>AC=S5?u[mPZjEKqP2_^Ml$?`IK3C?ga,Y%mqqMfQ><sJT(;$(Gg;e&5-5(gS,88@RuN1sRd*[]m=u3Q!!oA1HG@,#\^DG)k4a$?
%JVEhES;$"tmH4?,S_ED7oK:Hc^3m[?rnl`Tp39q.jUNnqZRL=AP@<NQ61=Y0\3D&gb]c#"WKS7sN^@f(*rML<E-$J^7rZ"NV!cSl
%](*h(U9:^*Ps'8Zk#uU_p[::e1aHj5da=hXn./c2=M++DKt3AO.RM,foqd7T'ZFc;e=U^pAEplp/?20B*$ct>g3E!8(rNj%V4o0.
%\=0Z*DTcR1=A>PIWsG"lZS5''/.JWlO0T*gGr6?DYOEZdD_"esX=cnCl/)1;MR&JgU8T!99G.SM2$lSt$*.JI1KBUSP>K=i_hqE\
%S?ZfOgZKd.pN(Ab`A<fu`^M/0!r+m4OBmKR6<)u!PQapLL[^c^2UFFMrC@VW4G-+S@3FWEAQ^krJ340<23s,7MLA6EPm'HY@1dna
%,#'P=9?Do^QH6e[Bbj:^89"o4@C"AWWZmRD+0cBk'2W6kjqX!_eK@QDV6d1d"B-V?l83mI""MCo/WKrt_'.6a84#lu99c*GkX<YR
%@S&WuZ<$kB+&ONB'pV2&5ls&1@Dq]VT)N0>pFNEq)1&\:`<`[>A<h$,kD,QeTt-'2Doq$?CbF<S^SQQ%Ilp\oGT.taNt^3j-b)T(
%XJcH(G_Mh0$[aPt;qEqP0;;;i/@,lKTD?W@ceoVc"FNtc4>]9DPo%lIOuQ<[i]R5scX[WI.LGc)50s8Q1Kd,@9'!W\m.A)#Gnu`F
%5QOM6UB'N(*/fM-W^NkI^ie-(bVNBiUIsU)EAJVbj]Ph`TaK#?_!X_,qIS"3G:Jrm)fkkAX1j*.PSu!7b(FA+^F2nA(3M'oe4A,G
%Em#7q,0QsM7-^otYN>_W4JCe99#e3e7h*3]:MBQ065JN=^'Hs,-r9(%Q'4ckSE'h9Q/p"+ZSE^?7l`/G?7a54>'?6o8VHWrLgQAo
%FSnbQP.2Fmfm+l(1<Zb`ki!K1fa8D"SZmXZ=Niiu$7g<$[$2-`i8qOD>U?0>s%XMT"W)E6QnAfY\Vn)%KlobO"\Btj*:TI%$A#"L
%&b7oh7=1hd<E#Kh]C0T*//jZq=7KC:6%'1.rOX"u][8ZE_c>F!bSA*o89OZG%'Zq;=o$o?(8R3DKD1_Y-ApeYqHA[OWbcuaX[Do%
%j:a2p30q!@<<U_c>*\5R!/AdmlnFs1LAsL95K+.NH2\!ggs[9,*3/#-l<h'>RQm_jr_%_dk"PL.V0^=JQdUNU)XRsZTNSeU`)Z,^
%cJL.-*:-,^NB*3BD<;;=.s%KRlFLCWnG<I2?")UY&%l!25;i#uEtH<_j6.SQ!/m)N\4Uc@h?8Y1;ijPJJ5-))TFsOZD?AHG1')2s
%1')cOs5X<E49KO<Irb\PX8U'c^csRE$VUQ*)#f#'e?_^"7qlkjGp#8`367)j.jLg,l]P->q>Gr@%UXktV=4APU[D.Z:Q9\i%kda5
%p7r`.bA>:`$/c+F$<0Q(OW<U2.?S>)_gb@Us+i3Bg%na8QeD19b;*!4,lAUUU^[5=-Kd^.bR!i=8*ij!$DFiZh\Tsd_1/kQ^XPET
%;ClmKYEiRZ.6[0=LbQm.J&+rb(qD?[]JOACV+<tVe\U,ZBqE4l[FaAkOi$aJ0Tq*8q+<Z9/+&?.Hq.ljVNE_t_GpAC^c8WcK.RG4
%d:"P[f&lIIrIZGPlp)1TK/)K&@r^RFrMRY=r)7+mieam@Z68#&#F\Oq3R.]H#2I3H$o>$*oVgKL4^&WBBuJOu]=M*&Uh-^s5;h'p
%LQ)J:$L(l@\G^aRZ,QZ;lH=RJ)?tY!TGiTWdTh-Y1Ek:a(?QCC/_d%3&9m0FAT#\G[*7)!V\_B-H?8ItQb'0j?a&,Hp'$EO'jDY;
%mQ%<50D\dM),Kg]hNZDV&$:L^IaOW?]')`AIsfX:?j?Q*m7!*/r[3XMDkB^?NA'-9_su&M?%:h2Bf1h?k\eT;nmt+Ma*1`Gba4a/
%s7jHtf#-r$]WUp7m::IRX)cE#n#kpfcd?!E_9;k^-<V26"`MTXBGmU68AgoJG[!)%AZkGc^#1&T6b`Bha1P7=J&,:^2s=]FYLoMg
%$':o3GD];>p4u\J$G08[?JuZF4T;BK8Ueeb#kNq<#o%!3Wn_;IJrhiTec%/0h;e#i1I4U($HVjs>S`Q<Nb\(e9k!8jJ(&E3RJbZP
%H]p627<r$"OVXX;\o:7KWJ.,>;GDGM3GFoZY8BkgD$qV77;<W21e4rm;Mn:/pbs##cf;dolhE-VH3h0c&?`mu@C3i;]4ruEa5T<@
%(8"`M>nHl^\P#FU@rd=BM+[l&O6#f_QL0g?0MjiW=A/W3(3rH&di3eL;`U4GO<B*S&-\CRQUY@CVH"D.=*mi3f.;`><J-*?Q)km9
%TbObrUYl^]!BEc[/3%:W/'I6ngK-?5aNWNkYM";9^7&W]85<-]ZCVE<QamO:[9:R,['\i:CuO*b0M.X(aA!mrTSZXE/n]4p$gpWu
%\m?q4RO="[O_823<-)0dPf6dq<cWSN'W]pL<!h,3S[)5'hj.4?obo;!(sMn#M0]*.D'A9%KYS/YHRc3;,#0=,r@fOt+%\<tTY$3m
%i^En0A4pqrD@;.n@WJQG$J4Orm`i#4X7O#)^FYXs+2b)ILAK/E;DmUbEm6M1?'3o<=Bq()mB90\M5t@5@I"$hmF.FM3%\Qj^988q
%8]/d0e,uI'#pf'JkmD$a)_R];J;$mPa>Zdm8J^XYpG;nh&[K=WnD_4dKs6A*_@NY$$UQ/35d"#dJ&@G1<J!3V,\"d!N+EXO;D,qS
%^j^]p83tCbi%P0%I:53po+4lM=)W4oEq+.@<5X5PEkIXE'XgW6%iL#$ID(C>H2(Jj"?%^i[)Y4_$$-!.37H^oM_Z-U7+[U&6<-UW
%B`Mu2GcT1)YiTT#:B`EV.kM*-\feX.B"^QMJj;19,o*acohWB4a.Ym-#"gYP(9+&3Eo[ZO%;\k8CZ$m6JNgN(.nZ'/-VT=+MNG1D
%WHVZoaN]Zq,5mgtQn(jf/t[.cB*PYDMFI#:l33<MK*G2/6_?b?*?e7=`K;oEjP*>#Wj3<SQQ2iP!E$_qfOdgX#<8n0Vh]S"Sf*q^
%dS^j:<5CgL7pS!k\R(*W,R'Bp<c8TR[[(1\;SHDTL>l0-:<$53RUte9M:Kd(3B\L8an180'$2B@<+Hm5;4q@u+0r:VReLE2-)u"'
%RL]?X+HTJ.""s-_OVV^1/P?46cWmOG#gQc_Q:D"<H'Uf!-jap]6;+CPUkN!+;c[)HdhXMPd#M6agNgsls,Mm>Ef@n(bs_ErVU4Vt
%#gVT%OQ^u2FTKB+#7#;/Ma4:'67,\<$R3a9PiU]W()eK:=]n13>GQ4G46FWN)d-5@48ocKJVXr8<bQN*>/X+#an<`bHrkG[-s!N"
%`=P[f_iZ(<=QCB%#E@ZcOAqMsPmT7.Md"')MNAaC8RZQDV[9''<LJXS6bq0:8j][cW>u&:k2kf\@/2OfHIFR+Q'-YH-hJ*`EA\@P
%=%B?fW0rM_C@%&*4Q\]cW&0NFV:@.23j>:+7J:g0f2KZP8Lt/MX';">S:T5+bimZo"F4ZXBN_=,Ol`?eVP\rBfn!qn'JT[pbc#jM
%)KJ8<jB!ickN"MM:\P4]-b"+%OZmsWBSr=a,6'Tr9^8Dbk>;G@&?X/PMGu.Ni>;r"MRaqn!?_dC)!+?m6DAb#d"bX-8#Y<GP+dS1
%;IlF8.n-uj[Wcmk,L[AX\&^I$MB]-g=AG`-OOI$%B\C$V+>U)r&PaQkD0O&>:m1%n6@4BJ1B_#uf>Qqb*Z7-r3-n7AXqjcAbT\2B
%Ob)I;m3A<Z5h\f/ZAMO:A"q?($S\1l#T#JWAr:q7=JT0-PDbZ-'1S#dVa$QT<C2q:S'[rZG!'67A&CWq?S-@iL19Qm&.qg&8fT&\
%)l98B:uKV_V?'kek'1D\eVKBq4[GK(;Of1!AZ=OG*lR+N)+_k`9e_$[3$BY1_;J;hOW=7O@!NC3Z_>f2$Ud>-O0VS8/TSp3/^]q,
%7$XMkinR\e!%+O+c)RcH<L>W6/Ob=V;3ZSo/!VAi0JA&X0+tBV@:mTD$oKV3n2q/G,[/`e0pO%>@Ql5=b1HR</'7e?e&\NN+SD"B
%O;=('OQM$><q#&G$kgIs'bm%R[MC;arVj_ps)LPS"pX4&m[[gF87qFn;\XZeoAtX3(bLUP@h9Bp+>RG7(/]U^aXbf4R9In5IC%#B
%^9TsjgU>M*6"n(N6ie2Yi4=%kBSgcb_*Z68_<4X`SSE329!OtH@,e(hTtHnldQ!=8I]<oh97Ki69COGE]mGTOKumo.ehV>08E'>*
%`+T6l0J\ZkVpO)8d_P]5nD8+b6nW1F/Su'p/5@?Q8g7[T$fWOaW3i/sVpTeHK8T3_H1!AtCtUn/Y30in0RBhU/:&4?Wuu^,h8"b*
%NG^,@TMs-d^R[\_%[6Eqm$<<%lupTE;1;5Y2oMkT/1r"*bRRRgBSj!Y>k`%HRGhbo`Pj\OR40F*OsPF*M\n@<?ra(t/r<M<QWEM5
%DWFik?1)\uMo8Ws\>&niFK:B8q$Ja[$I14gZeSfB=XR_\U'@hIB!Fj<D./"pM'eKYXYCuc>+.2e,mtqO$fFQDAo8ItE9ff?5n#FO
%1gIgnNefDlDA'8663WYYp^.X4^r&oEnaI60$'p+4!t.r>;@:T;U9!3!NlbZ0766#)b8Y(U"-Y-1e3YlbjZ@*opOU9'0M/&1`E$]i
%MG":,%X<M6_,Z^lXm-VE)X+k<GQD8tPe$H6%DsaF?CpdP0T_Y.D&&lrKSET:ln&m_OsNtml'S0#'29_7RpMpW$k&FWCU%>6!K,5t
%1^5)/-D<:CPsMUD8E15jG`aT;H$bf\Mj+oa;pL.P9t:m$VSn/^e+/cHL;Yans09k#rCNGk:e*cI&';JD1Uls/BC1"C,4bGPki?=_
%:hij2Yi2,Rmb?c6J.d5k\Pb.!OMH8[@!`,t(Pf<91Mr*:2n!-@Yf9+dp:7QpR#YZf(dZ4e0YIRbcdD*F`d/DU(kgu8\NiI]!XA%2
%I79!\Dr<*t4"Mb-'Ii3G,"I6>\dF^V-5N"OWt4?.-:1_0%_aFX&10KS<NH8'%&N"dXE*<6>q.q$^dNf_Ul$4E=Oa+eLgKlZU+lBe
%2_V83YJ!CER.U?paS:PAYDe.RYLkQa7F'I3kX8[>K$Wu!?3kO2N&+>nEa7U23'PXH#XE=)TbhIgR)XCWLP.?51-(ud%-$A88$5sE
%g,H8MK#&3k!Y\"S5SQin4q"AoOb2RdXQ%H_dSq/JhT7P;4%*J%$#hDRq^?T1K`2L`J/C.CQFa\@jA="E8NTE@Ob)U@e[BQ_j@Dh:
%-V;-N9+gV;""Fl:a`sb][ZWb>3^([%qdcATTlo!KiMiC?neLd$!mH*,D,R=*U-37H-;lel\/6?7AcZ-kU]Tp<f2pW2=HF-d69u4T
%6U?j^g4B'69G0.4=G94gU7bneO<QcC!Y_^+IQD,n<8ub12bf^2gif6nU+=Nj2.g2$D)(qB/-*;:R#UWtU+!eKR#UZu,.!/tnAldp
%W^/AS@!n=d=2X-5F5%h5#u-mB8cA)KU/o>a!TAr)(m.q"$/6=qA9pVm>%A"qW3fH]P@G.@eqW,(#n/D`ZZ>2dI^>R?P3C9#i6qR\
%@IF9q">EE#[+_<YV!Jm/7hTUd`E4%8*1KXt'+*_=0U6f.D(Aqt[oC>`/jt6A&D!DXJhk%.&i!LrEdao0#Np8hb[TXqg7-IjF(gdc
%\<SC6=Mja5<a(=)\e:*9OAp=08Xi@Xm2q'pnOI8UKolO<3K#$"!Q5S.)$3WbOY[GN%P<WV<<a8<f\QPZmtI,AX5+R75ZhPCK\%1m
%#[*ji8])fB-4eT'Ae]+kPd#fUmKe>!V'4=bG#GGT.b'Y;M"!r?ahj:;HS1d]gg7(h#6H7F.#1M[2(l._W7O2"%'`qZ3q*WIL/G#m
%$*!stF@,s<^uB\?,J^GZd-Qh5O?]Dos#B+dLI]=s</<e.Qm*2hYS"p3W9l`R?sFp4Z?_cEY<J_1R2qp8#QCAU5!a19E^du",S<OF
%6u8-Yb-sU78Rs.[d4g9R-F=+j"hTRa:k*Ki`?;.N68l;S/#"<>-V\S*MLda_)k\_jfTg*l\]@ZkngXpAJkA@NR$(UE9MJ()>b6ou
%6:`qqp4TLt@^mj^i(SbPQ`,!fn1UnT".="@_as/J-\9"b:>4OXJP;>kO=<=@bH/u[i:9$F\A7F70T>YLPhL$WhI0gcg\!`?>1IX:
%KIYjZ@[]D:.0GZL&18$'a((k5?fk%%FZl@SV'_:T+Q$?T0W'&a@MP/#:$bR>::Uk/(o-[bbE-YB/T]1\">pgm42KuS.Q7M-#d5J3
%,#^(R[2N&/6N[B<?B)I8_*iS_<:/9dm2GN%iaCR/*Pak6Lig(`'LJ[j3C.egQaTOE0EEPC!=2jacdBAKihmTCEW:^+oVA9:6Z%A]
%M+eXu\4J]2A"%qOPN`^T=1$F#+=BJ.Sa%O1#t?*PHIkPZLe(^3!j#BZLJ/+?#&o`_"/`Y#+D"!7`L3FraC#,o((j]e(W,BT%P:G/
%(8hL56F8E,C;t3$g8?hV7*_Yp>s^"!>Ap7Rk"r($E^5P'*MZTo_X/*>bhIq$RUlVY%N1#bJI=q+KW\cNT!;7g.P)_^aEXR\.:N<c
%$3;J-^R:ZK&EC#](tc"r@d,sBdURqT[`U:3$o2n"7p?a_.8>dE]?Z8E5-^1XOl('%k<jnPF=(s1SSL#`m=E/e95718FgsMOE;NUC
%XB<$koRZ&Km3*j``?JBCS$q&('&7*eQViGk;T7^ES7t4l$#B^DK\.F$;&;o.BIXW4p5Gm5)"n!.rK"$u7R[nKknIh#k#=LUF0+Kg
%V`b8bR%!&#fLt`#Lg3%TjIF6Ne:Z_N7'>:S;3Z%R95ToH:'`.FfK_ca!13t"mQ.Ptgk/=1\qW:D0f)%B!b<;V-*5"Kp0Cg6M4890
%ibds+;^?Aj54U'0^lIfmZ:RID7LKY1&\Ij:TJ9kgEh.d?c'dn/d`CXmL>8d>,D"W[AVBTX\:4&[>_j@cLDbOj"rL;K2tmTe3>a8g
%O(C53?MeY-jTF3Qdgd[7Ii,5cN(Td%PSD[mjIZ^u?QEj>giNUUg?c$2Q':DS+`-!L<[,%iY4F-rc/<$/h/LGk1ZH\Ef>2hgi="+c
%7A9$'dj:E/J'=@<Le*Cka?E4S'$%3ZE`]Qb%!H.lRYSEjFVtdqnbMa/p0(`j/=]4jnOY't[9Z6:@S0Ib=I>a%<u2K[-7YeN1X&GJ
%H]3>TM*-B?p03A*Ltl/AYfK8!bG^N;g&^lt9,bE[l`nXg$S.i<5kN>@h^g,h7?`oA:NA]LZn.IGK8bJD[fB7a8<shWe-AQQ9Ft)M
%;,ZU6\#U'j/.r!@4>m7J!fV^[F>Ihe(]p:;R!T1qnk]VI#S%3KKsK2<M0W6UKI'T*'5*^\=:0[gmOLhLZX5DUqeVR>#o1J`K00nN
%G63G42$aA*ArKEb2fu>S&/j?s,`H2,+A`3p-$MLO#(#WZ?p+jW0GXm7;Z_D16POT<B@D`o:eR_uI`'[)',:>RJ[&2+0cQ^@q3cSu
%@-BN=j\$/G@n$N\ls"OQKt5\/AQ/reGlS!8"T:="#)M6XE=7`9fK^<SXHOBdf6)t*>eBfj:0,'W!bdC9Xc+[:pdj`g?r!AVS%JuA
%]'5"m?m07/Vhl-nk&_Rs-8<M`PR*r-nl8:G+Ta+>`(8p(3/WCOjU'(LXl1ZBQ;Qo-)A]0`Zj@@cFPB-[dlG;i6"Eq;6KTFs0bau*
%hINH*a#.*0(JuY,MY4Y52MP^d',9LM5_=#]R59k9rh3rF$;r#Aa)t(I+rb/sjRB@38nUb@pa<TcnAEYrEe7+6JNol3:(F9L2`5]o
%(WAU]23DnZ<A!!n(,YJ<:D)Ni(RM0j(_cgWqIK]^aK@Ki&().-WD!CVp6ZL)`-m!K>XTK/Fp2sPWIubB'Hl+f)@UNcM2YTAMd7t\
%F:N0aJPTcrpp-DeJ/NM5(JX%D\d&>*F6t#PU%fmfG8_-J6.Q/Q:#Z:1QVBs`Vk-MZ9X\@R4QZb^1!_Ss-uVQ7m"?RBa\e#\FXT0:
%d,AJBO>"$[*eDSI[7O@%,0Y7)W5_<h"<L:[P&MU'=b<pEBaKn3&rO2pmfY-qEJ]I""qijd(*sZOQA[r!Q"NgA&fEDCYmtle#'8'T
%OX*4<AOWRpSA_3j7d%!F>`"[,B7V6]+R(U-(`DO#*p0?'Ykbfs2*@$)&^k$S'I,=['(Crdc7sX',aZq,;S3[P$"R-OO:4HD7%4f)
%C1#BXbWS\iBj)?9$B:,p)-Rt%d)qE34;s7\\V=O4\kuiDFBh1AT!!n5.KUe0O$q`MSpQ:+#r!9C11pdSXAd,D'W$`oq6L]j&=<l*
%,WThPI\<o'&8n4ecP+PI(IQPs#s\^K0$8u8K_>jlp7Y9Uph"D9^jSp;?t>\04s+fr`M6hVD1%UH"UZ7*g-a^,)kiQa9D_o.>2u7j
%EsY_/_PuT)U?:mZ&X%5n'&r4KjpDmoL]93]T!TW,'I$<XMGQt1X3:u+FAKkT"8CdYRP_pFU,WE(6:Ia9;p/>D1htkp!!\7?jPq,H
%Xb0!,i>tt8S=$k[s$@sm,#sM7e1Q48pcClsR\4pNWuZ%Aj1qnm#h$rZ;<DFaYRn5n2"F(IZ*I&9PrO=/8^c+;T?Ca3O:[5Tmq6j.
%J0r[#6':,)+@/C-U+l$A%Y?If-WIWbL"Z:W?rJLGL'<:)F?$4=K!W6!&gOF-#V@2cLijc8APHRZF:!=^qn<ZZTX>8%W=hV>Ur_Ge
%+k5Qb%>2e9"bk16MGKlI$;_F_66U:R'm6J)M)Wr3eVq5":QsKFSt@D6%oj^He4hQ<$n$phr:A6sBp@a?3],@TVk]r/aO&^]H_7-6
%a?'e<X-(1Ae24=9i-MNd-j'"H5_6QO%4E?;#E.m?;[mYgN6nGQF-K'`4r*X$Sm36^l9UFFl:$GKU-Xpr;=u>8lSSGNEN!QHRrLC9
%@#_(PlWoVs2,5A.7hU'YM_%_+.qCl5q2e!VgX+0W&fT"bUi`SG+T]V/<1mlY5D^)!U/id,24KU<?%g:`?t,kXMD<"I3MO_=qX=fC
%C.&0'KIHr@">ejhnrBF:!c:d@($6KK-).'JQsbZQ;ZtH46la$@P/-E:(.:LJ0u:NrKK12`!_d&j`hcXcU2\fgGnXjb0X!Z\l7rrp
%j3VtV8;3t(U5VK%%=\GAM92+mSP2a5A#t.q.H8R'B'R][$Bcf%B.L#E.g2cfk7PXW300DF-3tJ>GEq@s2:!D'`e^EU&LY*C(mIRE
%+ClI]A)se-C5]/!8uN;PK/CoE@UtEGP!uOK-<f]s>o?XoJ_.EaHO>oj@\D7sEJtIMgsdb!,j7XRW](YA8n'ZaT*W1d"j1?A-kLi%
%!T?Z_'#,9ZmbBM&5j+lWGC6K69;k`m'`*`[![`(`m9*@g/mGeUP#h8%K%cqiM7">cfob;4/b4`rK[6<iZm]#pB$A9BAW[&:+O)i8
%.8nD;TnnH9$!>3W4mTt]lJ&]rW+r&QV*pc#&/K8F+D.][6G$:*\WB^WjIW9Z]4gu=S3.%>;1sKu)c1"+?>IF=A!YOs'5hq#"um9L
%`$A(9G%.gmQ:n8-V.)@:lEn%3s3Mo8VL-036tR0(q"[/:AmQ@?hTKGgl9J`P&/-jAZc)ML&&^IEZ&ArI%^WN7]1o!I,^7rZ'?E)*
%8N(-*GZZ)Jk_]Dd"=J=Q?:%sTZL4ES)+>IM)sL"JU1C()cb?m^(%#CS:XNd1r0]ijO^*]QfpL8oVj5H(n=Cb8G8orQ(sTSpiLDH_
%SL_2f.%^RIT:F;G(_^/51n:hh/.8.*0QsXkH]72fp+B+ZNaSPUg^9!@1tP2#cDU.[9N"e#'93b,+oa3*<*GDF$uH3hHQFN$I3Ujg
%;ToNnk$@+qO^S87>`f0LChZWLX%V^uii*>3.'Rh..`K[A-rT8%m/<nPn]p4e6kS[SHHR]n9RQsFkU7fZ!caTWjA$cK2g3m2AOHgN
%m``,u9i)>#ETcbC\C\`!T/S&gD7Y_IRm7tUAW`W6>k5m:A=+.(,'L9E+#a7=VI&2HAJcT#0j7PL8s.7E2IoRU%;TMUSHB5US.f6r
%PJJoq;@%48O9knCk5gLjmL:)bm8N4A?g1WH$sNdP!qT-gW@.1Q-0OEUd,8d`Vt"iGS,f(80YbR9\k!CWgkm_Zi\"t<=;,omGVD$3
%hQ"@r$b(ad6K@bP#mb8-']B2W<g1mm^jPS"0"E_]eB,6h4N!fLS3Wa'9kGd.pSN=-)`oMm_%Ubo4g/Re'<%*(o>lX7"@`T$C-dEf
%`_OW27(rfnKKD1gAfQ#A.&@XS83g#j"RD;u7E/XUX^SA^hK*__hd]8t:*B%hTTR$?JW:;,;IHSm("Wit4Yt<5+<o>n!U&gM(T@JK
%l,/\h`BSo+@Gka_g8`8^STk;FXs:((j%9jo:VF!N=ZHPI<"g&\.%rC4RJ8RuU7aP>!_0hN:PK$b,o.mglM`aqOTpA'bb3D8:1@P%
%7sIr71+NuW3/WnU$'7)s7$AE3X:`6(N++gg;F6TbpG)4##fT2l$)c)Gk86g5>=rHpRQ3$(M\Hmd`lK$[.,#_9(tJit3%Y`-aFjO<
%2ipNtR:$<MD*O:_TrT4'U37a=Lc&+DHZO&XUl!EgdV,C1V0Oag?'7YhP%d[AJVFogE@?uE>"YXI68HS=DZZ-H3.9(/@Mu&q=HB>D
%$MOOG8.@c-T-,H:f`2kFdu:,Ho8n(M-fPt8V0Jl*'<G`an["^0N2?LX@Moa^,dW.tFaZ1h!DA/k2l1,]M;`#J2T;>BKNjVdP<-ZS
%VP#&Tr[Ph`cc!dpMDRB9-Xh;/"<l$d)Nj\o)2A,7HX<D)aMgtc:YHL1br$Sd+Y`"PWN2.T6'9+@T+Vp:3/'tGaU!)k+#=/H!]P!C
%<5r/7Ud>XAgj[?"$f`7&ef-.`6)0*uaFk\5\]urQDlhE>JrhP$+qZ.u"iYaR0p?$T.%(4#_+4Y@,r>Y6NlBO9TbE3P-"LGOXhKJ6
%\cS.;?'D!lU"II@G;6N\2'd0*7gTJKr5YMG0I_21p-Z;PJiDNLp]g+1Ttr6=#aRO."?Q^V(VkjAJ[^%_&n!5`d^k@uK5R,@6-heH
%HtEogQj(@:c)rQ?_W3aCO@&+:H=B>\]Y#78<mgL>HWd.@q/7gNiK'K8I,_hH7'#U8Z5U)@&K'F7Ea/o_ilugfP6ls,oP4be:>DPr
%HC98'0ge`4R*AC=_ZeC"X8+$/^u'5Y54agdB'A8p\,2(BGQA6<4r7ogJ`%C]47/+b9+V2(qso:EL2t0l:QYr&5]pS'q<&GJ]HStL
%Tdr,K%f;.01Ul-&PZ-]d;U"Xu7CTsni?:Xjl:XZA?;A5H"<0.<'G0<3=b^A4eFLgJa2?4p:`)1oNL=c%X\G#D!2/(4.3[*+BK`6:
%5ED2ZRfG4VWQK1TO5(=bJ"R&QB''r9F_ERP4/^VE,rFE*Gl;^qQskGVKM8d,BGcn&gk)+^;[MZU"5;$k<d,_G%U-tQD79YeQR>Ur
%@=gi2?49i!9>N-Pd3l9l02=2R_[MIY9P93A@X?Anfmomnp&s#eENn*/?`ZhPRl:K`L<u94l\WCq:(eR11lSsLZ.q11'R8%\$4&7p
%r_^QAO(nqZZQn7\ModgHB`\Zh^(qiIVVd>Rj;M^eEpnr_'H5FgjifqiLt>6%ei>L\*EW_'Op&9$aG<ocq'QQVTTWI0'U<\#?CX3u
%4@Yg.S9]kq;iOQg.kqho[;d@^5UY(.BO[,d4.)fJLD2V;mW5:ao?WU3EJu<B,^3cQ8J,`S&0]SrQZ2aQ7?Rd4i](5;8aaZ-P$74g
%l&d_CI#9aPLmrhoR6jL5oO+EbeM@<".C7[eqO=6Ncj@c!6NTo"BgZXKW"eW8GI/k">\=nQbLBG\jog_XS\Q=OCDST@FLuXKa#<rD
%aGgeJU-s9$&T/SbGi$8+p%+4Xgi/53r7DPp9$A<[Fqpf&-,eTb=F?^mqr%)+6GP!(8X7:h824OA=`]:pM(g>G\2aO]&@>`i-4P'I
%'"N9`'7F'nrO@9=48tS>P@`"k,dTd.o9'7ij+`EGa:JnT,!9CDXhZ2LaK`cb95*hI>OHRG8aafp8jHnS=D<BW\0SL/4p<:o-ZOTI
%&gY=&1q5QaX[%S.2G-n7Ju@F6:C%Gc&tK"@U2QQp)'>="N;oECUQp=QLH^$@5p4jn)CE.TaK9-:!l'*M^Uo+=SSAD=_pDE$3%$N'
%,N-_<&p+]tpdm/KkXH<9Ne3M>+-2'mB8Wp8\:^O$goT)u4H$<%]]WJmAL9iMF*-Vu\SeBhl]W0Y`m"1o;m#q;\d^9Pq3h8khZ'dO
%6V5G7qcMJa$j@i<YQnH#J`n;Z+tTPt'SY"N@:<e&`#U7K[8ga^F1i)4*,CUiRtDBkj6T#DC8p#OdRDs9FBa8A6l\uu">6H6/8P_]
%4WVQg]u6]0cC-2WioU@Ih3&$ORtFP3:GLM0$k4VGNk=-aM7>Q<6'"'[L!;n3;,E*Q5K"R@*o#2`!X[1,#0K*F&3(-L2Nkc\f8<"p
%\O>jSHlASZ)MbA%@<2uPbU'*/NnFfk8[j*lHSV30-R41F.++B,>9jL!N\!t?pO+NOa$=n30mBQ8idFqaSlQ<F<G*j<K2<],]d!Eo
%'ONU*JO=uZP%AP%l-8(8)qI3(\d+a;7#-JE_GD74@jr9WII]OD4jH:4lO?sb3kZCHFp^U-2II'0LU_iX'$E3-Qtn6Ike9qsfHLaS
%-dsh0oe>PcB"#1ZkIBIQcSL&S&.B'A8)\QA"\Jg_%X3as$'Enh$r^Ms&3p_Z]DKPq5iWC/c(#CjZP+[[U)kK)*"$:V1[Pb5VB'<V
%o0/Gq87Y.X6D-@rhl[=Q,XsR;8-fcO1pBOgUa:ZX!'A,g6o+1VWOLHbd&kRp%G.l'/1_:1_sU@imO"o=M3o2"fE.+alhEtBO'@A<
%hOoTkf/oi>h76(!iAl4$K%Lp6^F:#Z[MGMXG/il-g5pCoNQO<,fiXr_*uO!=QUG6[]?on'15iPO7$r-9:d[&2G6C;)jep?!HQb2;
%9f/pZ"?K7&F,/U=IkNLoDbQuECC43ZF(AOJo+]LA%(u,*TZFM3B]bK2^5SVri)?"9Kep;2r2mc]gqY!lgPDhM!Kj]'b%LkBDK8Mk
%";L5>!8NC,(@G)@h'Xs:DpuCSd,,3>m4P$;ONdEs9.hlo_?:cPY>5H&rP6d-i/Ch-=8p7WU7E#F<-Ze%Mt=Rf.%6,`^$-+a4?r%Q
%rX'@,OrNo-18gedb^D1r,m)pM)O`\C"Y-'BP1%gcTt_<Z134t)1\mFFQ:A7I"ff@9H2<2G,h&*sQmJ\J&GS08?L_Hsr)\CG-oU(>
%B,J7@l2=ipHR0q'L9]2Yc^2EkmbL66(,??H9snai:LU[G79!BH'G&Fu.a-VGTUF_IE+N!7L-D`K'IagWr\k3oU51Kq8lUO8K:A,l
%>#;(1%T2D$geBIfdk#V+U-O8gY@LL=3YO&4/X$`s7)jLp]##].$VXGB%T1mT'5!G%QuHJI2ufu:?6g/nM^1\W['_;u!"+/OPMe?L
%(omI<+M8UPk'7SI*ajBGbnEt,!JIX%L`g]3e4G#(SO`B%,\)FpKVno?@CG)LN$jAB1Hb)+`r_5Sqc+LC3f:caTJ1_4.<BEgpT(+,
%Fh35u?ZD^dpnK6R"U_R^(FP62hIEq?eP[<,hD"G$4+%b))qn/&).a)7M.Q$PE28<f.71gIA=+%k^-EhsisZ:<We?1T7"i6@7q$TA
%mC!G-2s?W2p&uXXr5FgRFm(5/F'g?h$4S!k]BSZZ@.k.i9*Wj2,?tH`_-";Rc$9W`,iDOe1Dcdq-4)SfbZk:7=Qu[eoPC.X1sDc?
%'\4Nq7Y-n@YXH!=VDK6hPX958-1pao;:nF((%n]T7Vh4t/9`>)HgYoc11/0,*!PI-Y`LF)`'eR(2C_Or0,A0=WD*q%kj(X(&9aWk
%'kU>l8tMJi%*+&>:%/a[JbnXKb@qCIE[](dn?Q#"-4u#pAmMYaVsk8sLrq+WWBJFtCjn@&'Ud7ZccG#pROfWrc)4C\.k@#/%O95K
%VdqquqC&]@/WeoX/ifOkjEDS4K)(bMp+U'faf)X29*g^-B#fuZT&4f-A7*`sBZb/R94V0%1hKOIkP@hJ;10ZT"Er*1\E^F<1H,XT
%Aj_d0D/k]qGSFasdE7"*"+u`r8tP?)o,65+(&<8JJK'MZ7_puk)Nm;HSsiBtP]"$hr6D&kH]+jD.!2*pB+YhkbdYBO^`+e]IYioC
%L2O*>\T,XnbG`YQAsD=Ld#W!$g@5M$Y`W8h</LK/?%1!Gpa'UQ\284,)i=:>W\OXh'BEg8>Cq-WqE?25?2sDHVUcS4;OAKI/2(N8
%GR59"J[5K!4-:MR.&Cr'Pu2E:;q+GOWgkq[2AP'8*+_N_KimJoK48/==n#!R(IO.\1NpQ+W8+7]?7Zfa:mjQSPZt9J@9XV3gUQm/
%6I7A?\&"kPR\A23[>Q:(*<!Fh(C%^g`8#t\db,Q`Y)u:VTL+E/j9.bf&,-_t=Tdk*]/9C?,.s54PEU;:^R6P?`XU.X7+N:71*TPe
%7UKThnu5$+6PB`)1c-D?bGEbdO7@g!H:>'Zm:QcSIuqh`"I@1>jDIR)8@/k#8M6-]r$t?-N+n]sDXXNbhk^+iKFqc%'j12;kRsLL
%J\!hV',&SmM`HMZ,K&34LggdddZe[fSD[\+)i[-q)!fAUEC[ipXs8(6kmZNAO=i:-JCZ/.T3pbBe#A;C*ic+UZ,iHP?A'fQqW5M^
%iF,$qX?[J6!e1V-r'fi#`2O\CGL9UP=Sl&pA7:XOCZJhm$7.1p`YbrBF,TH+7"HW#cO!*5eaGL!_8q!]h:]!:]1[l=hEI48(*F$b
%!>kR@Oc%5u6d9M":gX;4BYQ\3o@^:>0XE2@7cqRoLb9;\osCl##uRMEee]Yk`PVsI59Nk?@"c]4/Ye3qWKNoB-km9`rX-+F.!/Qg
%hfNLD[83PbXX-o"66`Q:I?PANjq1%n&sCT_VC8Mg$A^\*!.RJRWP^bX0.7,.:/'!a)!1r5,L"`\kd8]<2,N78!qVt[U8/)B7\Ol"
%aH.9%ZpN"N#]opjj%7T/5@OfKQ[4;'Kpu^$<9P4Jm5MqT5[qY`!.&sCZ,!K`&h5GAXJ>juNfhTCYqlG?%nT?TL0&CSGTgPuP'@EA
%nKmZDF"(6K72i'%8]+SRGE[oGX'Ius0LEE7<&cc#;2>oRV"BU+ng2p*@_SfqCj"sjWJWfh8W_ol`"+ULR&I_6U[hpap$fj]jBCsq
%%;*Y:geIgiS"M!T/V[mb8g-M`mVT+a.3ZON"Lu\jepJo#L?;q^2cW4dq>o7b.0QYOLRjGaJ]9CJWACEpqFdVR4T9Dc&jpSR7(*40
%6h?.XB@qr`]YGP^0;HCKR"udi6hUWuonS"P-Yim7[`I:.<[8:R;r.[d&2;T]QoWLJB^,D)CaND<";=d';&TQF7;A>X_^9J\!_rCr
%1dZPHhRjsbLbkV-cJ&ZQYBP1`Pu.j/nQKA#:_XW+H5@O1')6mH/9%\J6iuDKX<;;9K/serM2`M*EsHZ<kJg"cWG*Kf>=d9n/<pr[
%n4jf#['B?LM=D.P_Wn#n-hQh85d^Zb"#Oi,kBQ>9il*M`#S_O'6b'+G5tdQW?Uf\R:./+s1BBk6j5^\XlZ6gbh;_a,JS-*NDU1ds
%f8p?`).Ln/'^!P8(R$?m_OrX,fjM\/Lf=ZO_$Xg^i#?<siES^BG:/;`R\1e#$b=U_#Y_hY&6Jj9`BnWEO8J[5l:j:0=)(b@O"a/F
%m2qQh1%`@O=T\d<nV\p7guL-X)?=d]GEIVk`grprk5LpI!^F4>L^A]@mLd[RSg@>eZYh&q[rMFs;LopbFut9O13#T5*\AOEk.?CZ
%8@a4/WSlpG]G6FO].k(CiAmbY+b13&"<0A1#;E5M9MEt3'I?_GLW#AhO\h;'`_DEVpaJ/L*r[`9_M\rGKf+NJJOs`C/8qA:=fH;D
%(J%6V:foJ[-rt@^2fTF.*'7SQ'oF7`\OY#)kR;M6QoM"RRh^6Zd(Z\Z@FK,B&r@:CA/]"]iF\Sif=U>d95$"FL78lBa.)'71LHnr
%kf=>h?+@V%#d;uj),8m@r!?gf]J1s/h*a&cZl/bHN5cQC"RN[K1T=al"`a=eSHe?t;>mglJ@V7+h94aUh5'l\WGt@698GaZQdJpi
%X@QeQ0+Ei1-J5<3,=&DE;tY[XE%O3&;-]PLCtKBI2!ITeD<ioN@6'TLQj_`UihE6YM'"Ta/ji;dgf%f.D4j.j/0YjrYU@5#.L*bo
%NYEZUFlbj>7o&;?-=f^k;[G2e$q#I9N"`IAP)t`0!1tBX"fVb=Xk_d*#i$/j3"sGj[$rF6;RU%/O>4g(c33S7;/Y%K#r$YT3Ko1H
%5t#Q1$PqC/\XQ*K-8*a1/Of*NJH-jB'8@Ka#L;Jg;-R!dKos-oP6;'+!4UL7"-;@:61^t4^a,<Dd\(!(hcV+r:bu/;X6kXA#o3<6
%M(]O"KRkhhJZ&PMP>Q)D%81@9lVS9O$$)AoMSNIMl9(d`1am#AXb<S@9aek.?m&2hl6!%DlYsV;AQ5=R;9!BDX1;Xa!#W4]f'FfQ
%,P>3BK8r:U>,s(BI*!b+Cp&_TU'/JIF<A(C;K6d/5DVI*duQKIq=RG.CAP7N_Y(3*ABs@nSuh1#S1r9G\ZKe1(M(>[UUI+c8f)Jc
%G12L4R<n9(&Y'3ZQZ%X>cBQ342J0ZsaL@[54duoc!mlCkqoW.MOZkT7jn:okgkDU$*i`>u4DIC3gfV^5`sYkV^RMi(6?+A[Fu&_Y
%5e3ptX8>S%)%g1^PKT=!E`\R\C@4hBN_+8M7<C3k<-X9Y^I&RnXtI-Tb`03:^b3eC)XW*1Srt9>G/?PN[g[<$[)qMCP,J.1>AcY*
%Zi'&8&(?3gXN"2oJ95.Vnd1!'<m3[djBIE991@o&29Ag++\o/&kP3l3gnd8j1\oC+)HZ/\1@UPoKmkobTh'_s3&+T1+o08hM?,.H
%"P'.*N>3GefCgW^Y*P#qRK4;Tmi/.d>.)_k]t'sR,>2SnJm?f"pl^[WV?Zm!eI'iSdbYI=JHh<H';tR6C[u1,h%+Bfk6A"Fmb*ZV
%(J/^4Bi^HRrN'FB&n@Hk0msI?2hWJVk^S:@Z("GijO8jp)tod<a%tQ26%n6]TM6Zp2ipu<r#s*;)Xb<oWcGR^5m^+Zd2sb/]1`2Z
%0t:i1Y\Gt0XE9@WG_JF9V%8tm4B-29F'$ER`5&)Fc<c&I2-6q,`L0Hj:fh`t,]T#MPO^hS6@sD`YV[oi:!aI?hdGj^6!G&XE+9b#
%N[D(k$QA.1&5A0[Pe*PE+)HgKHTm]5EVN@a^G%)`-Fh$N&kFSIOWbhMGk[$mBE_g:TJ1@-Ahkd$i%:`B&[kJFR#@+f8C9+_e_rqI
%=*%(bPt$cX2:i#Y>nY&B!24]:+L4p+U#',_JRKQq>7=XJ/AuoaI@i.iip'`C#,_!QO_7/W89jJA5?,+2@8`)1lW>C1g4RfW,rGDe
%,`rh/'1e'\")s""%[+D7k>Ocl[uj3@p<Fe$r2>Toh`HhfHbmpS=L3\%"]gKZLqP$hqC7lbm2g<Hi=HU2n#[?s+pEi,#@d-),1J=h
%/@96;IAD_Y>+i[#Ti6:0+*eN)N"[-PAbPd3.U$PN:hVg]GX9mp(\&G/jD.H)9A]_E"B%Q$g7fiW74:.8R#g8]:1#&-^?8]mK)sqm
%qF/Jr+CiW;Ct./UR,u<C3U'E[NK$eT4:*pc\<lF=)r0K[l)jJR$=P??67;7>@q^DGX?do&^SpTN.AbB/XXqMXiaRl2r)lY&7dA/j
%7X:<I#fK>BdM*L-9]igncuVkiZ<q2n,8#`rrc4g5LcKq."YsIX.Bp79LrtN1oA#o/aIJo4N)t2W:knfrB.Bhf=@/g/kO,0:h?4L%
%]F39/1:4$Z4[@b?T-hQK@IA/^jA*K&ZNutWH0Co\p'T&*.A8NpaY!2,SR<Zh?Kn*f=M3cXLU]hEcOEN:1J<fY_*oU&_"jErC>to'
%P<U3Gm";$##W?.L@ckC<*i8'-)TLWT>`9Pk,&k:,>^+(89t9U<9r/a>Q(XSaC!;c5JH',EpGL&9e>@u4H3_/mR`$pZk9n.q;`buI
%aj/DHcn&_$Z4u[AEi"+MIuPuo3dr5bE2KhPje59_PP&%s?=L'$3n)'k_Vp,/0MR-YN:aMI=cfWtB),f!QD?I([2tO>j@YX-)O#tE
%l"3:$-4>)&0,g/T`E-b%@0@^+cpWe37@`CP:CXIHQ1MAWY5lq*_]rIobtZr==/q1VSV'c-\&;tr<T(Z/XBlB3q1eH_i?VHS45&7r
%37a4g;$aeL$"SIb/Ds4q&CSZF.8HG=J9MmS)Ccp2I/jL.MF2O_+cE2[Y.dTH14,79`>YhN'(!tb`q?1L$9OLjaOO/S1sNC;@[r5c
%Rt@ku9&,)-?4\IKWYEQ5;ZXL,a6>:*b07pm*.UOQ*C`R$BN+aK/<WIAjC?=bB,1;08$l7F,`u"K%%-;b@kc3tiMoF(!nAj8h$?6+
%UG"^H(P@jq1*D1ef20a+WK*f$PH)Tl7S-]:f02KF[pdn(WuHP!Q)+_Np[<"tnV6r^<,-#bi.Y!9-=9]Op*:(N;h"pIR`[iM.;UFQ
%]jR-i^$_L$B(K_L4rB?p4O@m-,HrmJmsi0Wh$V'3Xl+)rb,6mYV0>9jP`8,e,\60RSEHo]HhA>-go]s3hccf3?KYC>]"0@!md>9o
%qM3PF@+_+.pu>o9q6OGmN(2iQBAT9%8!T9PIl8BEqj#k!pb+%H9"%'g2a6MVgDLJS<0tYSDmG)>g:TX5+,hJ'b"7(hl2RgA25IS-
%:2_gIO_!]#ZGq,KT'i,ljs4NNLiUq3bD2jng7A84N)-=Aam$"0.(euCM[5(95Pmfs3LdX)>;+_irqQKn\o"3j~>
%AI9_PrivateDataEnd
